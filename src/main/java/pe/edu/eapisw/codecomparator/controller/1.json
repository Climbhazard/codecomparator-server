{"n_evaluacion_id":1,"titulo":"Punteros","descripcion":"Una pr√°ctica muy sencilla","tiempo":"00:05:00","fechaRegistro":1404154418013,"curso":"ED 1","grupo":"1","docente":null,"matriz":[{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":{"n_alumno_id":1,"t_codigo":"09200212","t_nombre":"Erick","t_apellido_paterno":"Cardenas","t_apellido_materno":"Alva","docente":null},"proyecto":{"nombre":"Foo","codigos":[],"paquetes":[{"nombre":"foo","codigos":[{"nombre":"Foo.java","contenido":"package foo;\n\npublic class Foo {\n\n\tprivate int i;\n\t\n\tpublic Foo(){}\n\n\tpublic int getI() {\n\t\treturn i;\n\t}\n\n\tpublic void setI(int i) {\n\t\tthis.i = i;\n\t}\n\n}\n","q":[0.2625,0,0.15625,0.2375,0,0.1625,0.01875,0,0.15625,0,0.15625,0.01875,0,0.31875,0,0.15625,0.00625,0,0.01875,0,0.275,0,0]}],"paquetes":[{"nombre":"service","codigos":[{"nombre":"FooService.java","contenido":"package foo.service;\n\nimport foo.Foo;\n\npublic class FooService {\n\n\tpublic void incI(Foo foo) {\n\t\tint i = foo.getI();\n\t\tfoo.setI(i++);\n\t}\n\n}\n","q":[0.2625,0,0,0.15625,0.2375,0,0.15625,0.00625,0,0,0,0.01875,0,0,0,0,0,0]}],"paquetes":[]}]}]}},{"alumno":{"n_alumno_id":2,"t_codigo":"09200056","t_nombre":"Jose","t_apellido_paterno":"Hinojoza","t_apellido_materno":"Acevedo","docente":null},"proyecto":{"nombre":"spring-mvc-angularjs","codigos":[],"paquetes":[{"nombre":"com","codigos":[],"paquetes":[{"nombre":"xvitcoder","codigos":[],"paquetes":[{"nombre":"angualrspringapp","codigos":[],"paquetes":[{"nombre":"beans","codigos":[{"nombre":"RailwayStation.java","contenido":"package com.xvitcoder.angualrspringapp.beans;\n\npublic class RailwayStation {\n\n\t\n\tprivate Long id;\n\t\n\tprivate String name;\n\t\n\tprivate Train train;\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic Train getTrain() {\n\t\treturn train;\n\t}\n\n\tpublic void setTrain(Train train) {\n\t\tthis.train = train;\n\t}\n\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\t\n\t\n\t\n}\n","q":[0.2625,0,0,0,0,0.15625,0.2375,0,0.1625,0.1,0,0.1625,0.0625,0,0.1625,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0.1,0,0.31875,0,0.15625,0.00625,0,0.1,0,0.275,0,0]},{"nombre":"Train.java","contenido":"package com.xvitcoder.angualrspringapp.beans;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/21/12\n * Time: 12:19 AM\n */\npublic class Train {\n    private Long id;\n    private String name;\n    private Integer speed;\n    private Boolean diesel;\n\n    public Train() { }\n\n    public Train(Long id, String name, Integer speed, Boolean diesel) {\n        this.id = id;\n        this.name = name;\n        this.speed = speed;\n        this.diesel = diesel;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getSpeed() {\n        return speed;\n    }\n\n    public void setSpeed(Integer speed) {\n        this.speed = speed;\n    }\n\n    public Boolean getDiesel() {\n        return diesel;\n    }\n\n    public void setDiesel(Boolean diesel) {\n        this.diesel = diesel;\n    }\n}\n","q":[0.2625,0,0,0,0,0.15625,0.2375,0,0.1625,0.1,0,0.1625,0.0625,0,0.1625,0.06875,0,0.1625,0.10625,0,0.15625,0,0.15625,0,0.1,0,0.0625,0,0.06875,0,0.10625,0,0.275,0,0,0.275,0,0,0.275,0,0,0.275,0,0,0.15625,0.1,0,0.31875,0,0.15625,0.00625,0,0.1,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0.10625,0,0.31875,0,0.15625,0.00625,0,0.10625,0,0.275,0,0]}],"paquetes":[]},{"nombre":"service","codigos":[{"nombre":"CarServiceImpl.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA. User: xvitcoder Date: 12/20/12 Time: 11:14 PM\n */\n@Service(\"carService\")\npublic class CarServiceImpl implements CarService {\n\tprivate static List<String> carList = new ArrayList<String>();\n\n\tpublic List<String> getAllCars() {\n\t\treturn carList;\n\t}\n\n\tpublic void addCar(String car) {\n\t\tcarList.add(car);\n\t}\n\n\tpublic void deleteCar(String car) {\n\t\tif (carList.contains(car)) {\n\t\t\tcarList.remove(car);\n\t\t}\n\t}\n\n\tpublic void deleteAll() {\n\t\tcarList.clear();\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0,0.0625,0,0,0.0625,0.15625,0,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0,0,0,0.15625,0.00625,0,0.0625,0,0.2875,0,0,0,0,0,0,0.15625,0.00625,0,0,0]},{"nombre":"RailwayStationService.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport com.xvitcoder.angualrspringapp.beans.RailwayStation;\n\nimport java.util.List;\n\n\npublic interface RailwayStationService {\n\t\n    public List<RailwayStation> getAllRailwayStations();\n\n    public RailwayStation getRailwayStationById(Long id);\n\n    public void addRailwayStation(RailwayStation RailwayStation);\n\n    public void deleteRailwayStationById(Long id);\n\n    public void deleteAll();\n\n    public void updateRailwayStation(RailwayStation RailwayStation);\n}\n","q":[0.2625,0,0,0,0,0.15625,0.25625,0,0.15625,0,0,0,0.15625,0,0,0.1,0,0.15625,0.00625,0,0,0,0.15625,0.00625,0,0.1,0,0.15625,0.00625,0,0.15625,0.00625,0,0,0]},{"nombre":"RailwayStationServiceImpl.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.stereotype.Service;\n\nimport com.xvitcoder.angualrspringapp.beans.RailwayStation;\n\n@Service(\"RailwayStationService\")\npublic class RailwayStationServiceImpl implements RailwayStationService {\n\n\tprivate static List<RailwayStation> rsList = new ArrayList<RailwayStation>();\n\tprivate static Long id = 0L;\n\n\tpublic RailwayStation getRailwayStationById(Long id) {\n\n\t\treturn findRailwayStationById(id);\n\t}\n\n\tprivate RailwayStation findRailwayStationById(Long id) {\n\t\tfor (RailwayStation rs : rsList) {\n\t\t\tif (rs.getId() == id) {\n\t\t\t\treturn rs;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic List<RailwayStation> getAllRailwayStations() {\n\t\treturn rsList;\n\t}\n\n\tpublic void addRailwayStation(RailwayStation railwayStation) {\n\t\trailwayStation.setId(++id);\n\t\trsList.add(railwayStation);\n\n\t}\n\n\tpublic void deleteRailwayStationById(Long id) {\n\t\tRailwayStation found = findRailwayStationById(id);\n\t\tif (found != null) {\n\t\t\trsList.remove(found);\n\t\t\tid--;\n\t\t}\n\n\t}\n\n\tpublic void updateRailwayStation(RailwayStation railwayStation) {\n\t\tRailwayStation found = findRailwayStationById(railwayStation.getId());\n\t\tif (found != null) {\n\t\t\trsList.remove(found);\n\t\t\trsList.add(railwayStation);\n\t\t}\n\t}\n\n\tpublic void deleteAll() {\n\t\trsList.clear();\n\t\tid = 0L;\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0,0,0,0,0,0.1625,0.175,0.1,0,0,0.15625,0,0,0.1,0,0.31875,0,0,0.1625,0,0,0.1,0,0.11875,0,0,0,0.2875,0,0,0,0.31875,0,0.31875,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0,0,0,0,0,0.15625,0.00625,0,0.1,0,0,0,0,0,0.2875,0,0,0,0,0,0.15625,0.00625,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0.15625,0.00625,0,0,0,0,0]},{"nombre":"TrainServiceImpl.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport com.xvitcoder.angualrspringapp.beans.Train;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA. User: xvitcoder Date: 12/21/12 Time: 12:21 AM\n */\n@Service(\"trainService\")\npublic class TrainServiceImpl implements TrainService {\n\tprivate static List<Train> trainList = new ArrayList<Train>();\n\tprivate static Long id = 0L;\n\n\tpublic List<Train> getAllTrains() {\n\t\treturn trainList;\n\t}\n\n\tpublic Train getTrainById(Long id) {\n\t\treturn findTrainById(id);\n\t}\n\n\tpublic void addTrain(Train train) {\n\t\ttrain.setId(++id);\n\t\ttrainList.add(train);\n\t}\n\n\tpublic void deleteTrainById(Long id) {\n\t\tTrain foundTrain = findTrainById(id);\n\t\tif (foundTrain != null) {\n\t\t\ttrainList.remove(foundTrain);\n\t\t\tid--;\n\t\t}\n\t}\n\n\tpublic void deleteAll() {\n\t\ttrainList.clear();\n\t\tid = 0L;\n\t}\n\n\tpublic void updateTrain(Train train) {\n\t\tTrain foundTrain = findTrainById(train.getId());\n\t\tif (foundTrain != null) {\n\t\t\ttrainList.remove(foundTrain);\n\t\t\ttrainList.add(train);\n\t\t}\n\t}\n\n\tprivate Train findTrainById(Long id) {\n\t\tfor (Train train : trainList) {\n\t\t\tif (train.getId() == id) {\n\t\t\t\treturn train;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0,0,0,0,0,0.1625,0.175,0.1,0,0,0.15625,0,0,0,0.31875,0,0.15625,0,0,0.1,0,0.31875,0,0,0.15625,0.00625,0,0,0,0,0,0,0,0,0,0.15625,0.00625,0,0.1,0,0,0,0,0,0.2875,0,0,0,0,0,0.15625,0.00625,0,0,0,0,0,0.15625,0.00625,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0.1625,0,0,0.1,0,0.11875,0,0,0,0.2875,0,0,0,0.31875,0,0.31875,0]},{"nombre":"CarService.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/20/12\n * Time: 11:12 PM\n */\npublic interface CarService {\n    public List<String> getAllCars();\n\n    public void addCar(String car);\n\n    public void deleteCar(String car);\n\n    public void deleteAll();\n}\n","q":[0.2625,0,0,0,0,0.15625,0.25625,0,0.15625,0,0.0625,0,0.15625,0.00625,0,0.0625,0,0.15625,0.00625,0,0.0625,0,0.15625,0.00625,0]},{"nombre":"TrainService.java","contenido":"package com.xvitcoder.angualrspringapp.service;\n\nimport com.xvitcoder.angualrspringapp.beans.Train;\n\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/21/12\n * Time: 12:20 AM\n */\npublic interface TrainService {\n    public List<Train> getAllTrains();\n\n    public Train getTrainById(Long id);\n\n    public void addTrain(Train train);\n\n    public void deleteTrainById(Long id);\n\n    public void deleteAll();\n\n    public void updateTrain(Train train);\n}\n","q":[0.2625,0,0,0,0,0.15625,0.25625,0,0.15625,0,0,0,0.15625,0,0,0.1,0,0.15625,0.00625,0,0,0,0.15625,0.00625,0,0.1,0,0.15625,0.00625,0,0.15625,0.00625,0,0,0]}],"paquetes":[]},{"nombre":"controller","codigos":[{"nombre":"TrainController.java","contenido":"package com.xvitcoder.angualrspringapp.controller;\n\nimport com.xvitcoder.angualrspringapp.beans.Train;\nimport com.xvitcoder.angualrspringapp.service.TrainService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/21/12\n * Time: 12:22 AM\n */\n@Controller\n@RequestMapping(\"/trains\")\npublic class TrainController {\n\n    @Autowired\n    private TrainService trainService;\n\n    @RequestMapping(\"trainslist.json\")\n    public @ResponseBody List<Train> getTrainList() {\n        return trainService.getAllTrains();\n    }\n\n    @RequestMapping(value = \"/addTrain\", method = RequestMethod.POST)\n    public @ResponseBody void addTrain(@RequestBody Train train) {\n        trainService.addTrain(train);\n    }\n\n    @RequestMapping(value = \"/updateTrain\", method = RequestMethod.PUT)\n    public @ResponseBody void updateTrain(@RequestBody Train train) {\n        trainService.updateTrain(train);\n    }\n\n    @RequestMapping(value = \"/removeTrain/{id}\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeTrain(@PathVariable(\"id\") Long id) {\n        trainService.deleteTrainById(id);\n    }\n\n    @RequestMapping(value = \"/removeAllTrains\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeAllTrains() {\n        trainService.deleteAll();\n    }\n\n    @RequestMapping(\"/layout\")\n    public String getTrainPartialPage(ModelMap modelMap) {\n        return \"trains/layout\";\n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0,0,0.15625,0,0,0,0,0.31875,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0.15625,0.0625,0,0,0,0.31875,0,0]},{"nombre":"LoginController.java","contenido":"package com.xvitcoder.angualrspringapp.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"/login\")\npublic class LoginController {\n\n\t@RequestMapping(\"/user.json\")\n\tpublic @ResponseBody String getUsuario(){\n\t\treturn \"braulio\";\n\t}\n\t\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0,0,0,0,0.15625,0,0.0625,0,0.31875,0]},{"nombre":"IndexController.java","contenido":"package com.xvitcoder.angualrspringapp.controller;\n\n//import com.xvitcoder.angualrspringapp.service.CarService;\n//import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\n//import org.springframework.ui.ModelMap;\n//import org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\n//import org.springframework.web.bind.annotation.RequestMethod;\n//import org.springframework.web.bind.annotation.ResponseBody;\n\n//import java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/20/12\n * Time: 5:27 PM\n */\n@Controller\n@RequestMapping(\"/\")\npublic class IndexController {\n\n    @RequestMapping\n    public String getIndexPage() {\n        return \"index\";\n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.15625,0.0625,0,0.31875,0]},{"nombre":"CarController.java","contenido":"package com.xvitcoder.angualrspringapp.controller;\n\nimport com.xvitcoder.angualrspringapp.service.CarService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.List;\n\n/**\n * Created with IntelliJ IDEA.\n * User: xvitcoder\n * Date: 12/21/12\n * Time: 12:23 AM\n */\n@Controller\n@RequestMapping(\"/cars\")\npublic class CarController {\n\n    @Autowired\n    private CarService carService;\n\n    @RequestMapping(\"/carlist.json\")\n    public @ResponseBody List<String> getCarList() {\n        return carService.getAllCars();\n    }\n\n    @RequestMapping(value = \"/addCar/{car}\", method = RequestMethod.POST)\n    public @ResponseBody void addCar(@PathVariable(\"car\") String car) {\n        carService.addCar(car);\n    }\n\n    @RequestMapping(value = \"/removeCar/{car}\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeCar(@PathVariable(\"car\") String car) {\n        carService.deleteCar(car);\n    }\n\n    @RequestMapping(value = \"/removeAllCars\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeAllCars() {\n        carService.deleteAll();\n    }\n\n    @RequestMapping(\"/layout\")\n    public String getCarPartialPage() {\n        return \"cars/layout\";\n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0,0,0,0.15625,0,0,0.0625,0,0.31875,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"RailwayStationController.java","contenido":"package com.xvitcoder.angualrspringapp.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.xvitcoder.angualrspringapp.beans.RailwayStation;\nimport com.xvitcoder.angualrspringapp.service.RailwayStationServiceImpl;\n\n@Controller\n@RequestMapping(\"/railwaystations\")\npublic class RailwayStationController {\n\n    @Autowired\n    private RailwayStationServiceImpl railwayStationsService;\n\n    @RequestMapping(\"railwaystationlist.json\")\n    public @ResponseBody List<RailwayStation> getRailwayStationList() {\n        return railwayStationsService.getAllRailwayStations();\n    }\n\n    @RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public @ResponseBody void addRailwayStation(@RequestBody RailwayStation railwayStation) {\n        railwayStationsService.addRailwayStation(railwayStation);\n    }\n\n    @RequestMapping(value = \"/update\", method = RequestMethod.PUT)\n    public @ResponseBody void updateRailwayStation(@RequestBody RailwayStation railwayStation) {\n        railwayStationsService.updateRailwayStation(railwayStation);\n    }\n\n    @RequestMapping(value = \"/remove/{id}\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeRailwayStation(@PathVariable(\"id\") Long id) {\n        railwayStationsService.deleteRailwayStationById(id);\n    }\n\n    @RequestMapping(value = \"/removeAll\", method = RequestMethod.DELETE)\n    public @ResponseBody void removeAllRailwayStations() {\n        railwayStationsService.deleteAll();\n    }\n\n    @RequestMapping(\"/layout\")\n    public String getRailwayStationPartialPage(ModelMap modelMap) {\n        return \"railwaystations/layout\";\n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0,0,0.15625,0,0,0,0,0.31875,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0.1,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0.15625,0.0625,0,0,0,0.31875,0,0]}],"paquetes":[]}]}]}]}]}},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":{"n_alumno_id":1,"t_codigo":"09200216","t_nombre":"Carolina","t_apellido_paterno":"Huamansiza","t_apellido_materno":"Gironda","docente":null},"proyecto":{"nombre":"codecomparator-server","codigos":[],"paquetes":[{"nombre":"pe","codigos":[],"paquetes":[{"nombre":"edu","codigos":[],"paquetes":[{"nombre":"eapisw","codigos":[],"paquetes":[{"nombre":"codecomparator","codigos":[],"paquetes":[{"nombre":"beans","codigos":[],"paquetes":[{"nombre":"json","codigos":[{"nombre":"Codigo.java","contenido":"package pe.edu.eapisw.codecomparator.beans.json;\n\n//import java.io.File;\nimport java.io.Serializable;\n\npublic class Codigo implements Serializable {\n\n\tprivate static final long serialVersionUID = 4910922867942133113L;\n\tprivate String nombre;\n\t// private File file = null;\n\tprivate String contenido;\n\tprivate Double[] Q;\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic Double[] getQ() {\n\t\treturn Q;\n\t}\n\n\tpublic void setQ(Double[] q) {\n\t\tQ = q;\n\t}\n\n\tpublic String getContenido() {\n\t\treturn contenido;\n\t}\n\n\tpublic void setContenido(String contenido) {\n\t\tthis.contenido = contenido;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Codigo { nombre : \" + nombre + \" }\";\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0.0625,0,0.1625,0.075,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.075,0,0.31875,0,0.15625,0.00625,0,0.075,0,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0,0,0,0,0]},{"nombre":"Posicion.java","contenido":"package pe.edu.eapisw.codecomparator.beans.json;\n\nimport java.io.Serializable;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Alumno;\n\npublic class Posicion implements Serializable {\n\n\tprivate static final long serialVersionUID = -4370630856808226073L;\n\tprivate Alumno alumno;\n\tprivate Proyecto proyecto;\n\n\tpublic Alumno getAlumno() {\n\t\treturn alumno;\n\t}\n\n\tpublic void setAlumno(Alumno alumno) {\n\t\tthis.alumno = alumno;\n\t}\n\n\tpublic Proyecto getProyecto() {\n\t\treturn proyecto;\n\t}\n\n\tpublic void setProyecto(Proyecto proyecto) {\n\t\tthis.proyecto = proyecto;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0,0,0.1625,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0]},{"nombre":"Proyecto.java","contenido":"package pe.edu.eapisw.codecomparator.beans.json;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\n/**\n * Clase que almacenara el contenido del proyecto fisico cargado al servidor\n * */\npublic class Proyecto implements Serializable {\n\n\tprivate static final long serialVersionUID = -9104261263964389144L;\n\tprivate String nombre;\n\tprivate Collection<Codigo> codigos = new ArrayList<Codigo>();\n\tprivate Collection<Paquete> paquetes = new ArrayList<Paquete>();\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic Collection<Codigo> getCodigos() {\n\t\treturn codigos;\n\t}\n\n\tpublic void setCodigos(Collection<Codigo> codigos) {\n\t\tthis.codigos = codigos;\n\t}\n\n\tpublic Collection<Paquete> getPaquetes() {\n\t\treturn paquetes;\n\t}\n\n\tpublic void setPackages(Collection<Paquete> paquetes) {\n\t\tthis.paquetes = paquetes;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Proyecto : [nombre : \" + nombre\n\t\t\t\t+ ((codigos.isEmpty()) ? \"\" : \"\\n\\tC\\u00f3digos : \" + codigos)\n\t\t\t\t+ ((paquetes.isEmpty()) ? \"\" : \"\\n\\tPaquetes : \" + paquetes)\n\t\t\t\t+ \" ]\";\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0,0,0,0,0,0.1625,0,0,0,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"nombre":"Paquete.java","contenido":"package pe.edu.eapisw.codecomparator.beans.json;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class Paquete implements Serializable {\n\n\tprivate static final long serialVersionUID = -4843115943266287488L;\n\tprivate String nombre;\n\tprivate Collection<Codigo> codigos = new ArrayList<Codigo>();\n\tprivate Collection<Paquete> paquetes = new ArrayList<Paquete>();\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic Collection<Codigo> getCodigos() {\n\t\treturn codigos;\n\t}\n\n\tpublic void setCodigos(Collection<Codigo> codigos) {\n\t\tthis.codigos = codigos;\n\t}\n\n\tpublic Collection<Paquete> getPaquetes() {\n\t\treturn paquetes;\n\t}\n\n\tpublic void setPackages(Collection<Paquete> paquetes) {\n\t\tthis.paquetes = paquetes;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"\\nPaquete : (nombre : \"\n\t\t\t\t+ nombre\n\t\t\t\t+ ((codigos.isEmpty()) ? \"\" : \", C\\u00f3digos<\" + codigos.size() + \"> : \"\n\t\t\t\t\t\t+ codigos)\n\t\t\t\t+ ((paquetes.isEmpty()) ? \"\" : \", Paquetes<\" + paquetes.size()\n\t\t\t\t\t\t+ \"> : \\n\" + paquetes) + \" )\";\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0,0,0,0,0,0.1625,0,0,0,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]},{"nombre":"Evaluacion.java","contenido":"package pe.edu.eapisw.codecomparator.beans.json;\n\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.Date;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Curso;\n\npublic class Evaluacion implements Serializable {\n\n\tprivate static final long serialVersionUID = 3793765939640816920L;\n\tprivate Integer evaluacionId;\n\tprivate String descripcion;\n\tprivate Date horaInicio;\n\tprivate Date horaFin;\n\tprivate Date fechaRegistro;\n\tprivate Curso curso;\n\tprivate Collection<Posicion> matriz;\n\n\tpublic Integer getEvaluacionId() {\n\t\treturn evaluacionId;\n\t}\n\n\tpublic void setEvaluacionId(Integer evaluacionId) {\n\t\tthis.evaluacionId = evaluacionId;\n\t}\n\n\tpublic String getDescripcion() {\n\t\treturn descripcion;\n\t}\n\n\tpublic void setDescripcion(String descripcion) {\n\t\tthis.descripcion = descripcion;\n\t}\n\n\tpublic Date getHoraInicio() {\n\t\treturn horaInicio;\n\t}\n\n\tpublic void setHoraInicio(Date horaInicio) {\n\t\tthis.horaInicio = horaInicio;\n\t}\n\n\tpublic Date getHoraFin() {\n\t\treturn horaFin;\n\t}\n\n\tpublic void setHoraFin(Date horaFin) {\n\t\tthis.horaFin = horaFin;\n\t}\n\n\tpublic Date getFechaRegistro() {\n\t\treturn fechaRegistro;\n\t}\n\n\tpublic void setFechaRegistro(Date fechaRegistro) {\n\t\tthis.fechaRegistro = fechaRegistro;\n\t}\n\n\tpublic Curso getCurso() {\n\t\treturn curso;\n\t}\n\n\tpublic void setCurso(Curso curso) {\n\t\tthis.curso = curso;\n\t}\n\n\tpublic Collection<Posicion> getMatriz() {\n\t\treturn matriz;\n\t}\n\n\tpublic void setMatriz(Collection<Posicion> matriz) {\n\t\tthis.matriz = matriz;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.06875,0,0.1625,0.0625,0,0.1625,0,0,0.1625,0,0,0.1625,0,0,0.1625,0,0,0.1625,0,0,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0]}],"paquetes":[]},{"nombre":"model","codigos":[{"nombre":"Comparacion.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.io.Serializable;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Evaluacion;\n\npublic class Comparacion implements Serializable {\n\n\tprivate static final long serialVersionUID = -2727664758882609117L;\n\tprivate Integer comparacionId;\n\tprivate String descripcion;\n\tprivate int tipoComparacion;\n\tprivate Evaluacion evaluacion;\n\tprivate Alumno alumnoComparado; // contra el que se va a comparar\n\tprivate Alumno alumnoAComparar;\n\n\tpublic Integer getComparacionId() {\n\t\treturn comparacionId;\n\t}\n\n\tpublic void setComparacionId(Integer comparacionId) {\n\t\tthis.comparacionId = comparacionId;\n\t}\n\n\tpublic String getDescripcion() {\n\t\treturn descripcion;\n\t}\n\n\tpublic void setDescripcion(String descripcion) {\n\t\tthis.descripcion = descripcion;\n\t}\n\n\tpublic int getTipoComparacion() {\n\t\treturn tipoComparacion;\n\t}\n\n\tpublic void setTipoComparacion(int tipoComparacion) {\n\t\tthis.tipoComparacion = tipoComparacion;\n\t}\n\n\tpublic Evaluacion getEvaluacion() {\n\t\treturn evaluacion;\n\t}\n\n\tpublic void setEvaluacion(Evaluacion evaluacion) {\n\t\tthis.evaluacion = evaluacion;\n\t}\n\n\tpublic Alumno getAlumnoComparado() {\n\t\treturn alumnoComparado;\n\t}\n\n\tpublic void setAlumnoComparado(Alumno alumnoComparado) {\n\t\tthis.alumnoComparado = alumnoComparado;\n\t}\n\n\tpublic Alumno getAlumnoAComparar() {\n\t\treturn alumnoAComparar;\n\t}\n\n\tpublic void setAlumnoAComparar(Alumno alumnoAComparar) {\n\t\tthis.alumnoAComparar = alumnoAComparar;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.06875,0,0.1625,0.0625,0,0.1625,0.01875,0,0.1625,0,0,0.1625,0,0,0.1625,0,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.01875,0,0.31875,0,0.15625,0.00625,0,0.01875,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0]},{"nombre":"Curso.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.io.Serializable;\nimport java.util.Collection;\n\npublic class Curso implements Serializable {\n\n\tprivate static final long serialVersionUID = 7662375284771959577L;\n\tprivate Integer cursoId;\n\tprivate String nombre;\n\tprivate Integer grupo;\n\tprivate Collection<Docente> docentes;\n\n\tpublic Integer getCursoId() {\n\t\treturn cursoId;\n\t}\n\n\tpublic void setCursoId(Integer cursoId) {\n\t\tthis.cursoId = cursoId;\n\t}\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic Integer getGrupo() {\n\t\treturn grupo;\n\t}\n\n\tpublic void setGrupo(Integer grupo) {\n\t\tthis.grupo = grupo;\n\t}\n\n\tpublic Collection<Docente> getDocentes() {\n\t\treturn docentes;\n\t}\n\n\tpublic void setDocentes(Collection<Docente> docentes) {\n\t\tthis.docentes = docentes;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.06875,0,0.1625,0.0625,0,0.1625,0.06875,0,0.1625,0,0,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0]},{"nombre":"Alumno.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.io.Serializable;\n\npublic class Alumno implements Serializable {\n\n\tprivate static final long serialVersionUID = -8483917387722442892L;\n\tprivate String alumnoId; // cÔøΩdigo del alumno\n\tprivate String nombre;\n\tprivate String apellidoPaterno;\n\tprivate String apellidoMaterno;\n\n\tpublic String getAlumnoId() {\n\t\treturn alumnoId;\n\t}\n\n\tpublic void setAlumnoId(String alumnoId) {\n\t\tthis.alumnoId = alumnoId;\n\t}\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic String getApellidoPaterno() {\n\t\treturn apellidoPaterno;\n\t}\n\n\tpublic void setApellidoPaterno(String apellidoPaterno) {\n\t\tthis.apellidoPaterno = apellidoPaterno;\n\t}\n\n\tpublic String getApellidoMaterno() {\n\t\treturn apellidoMaterno;\n\t}\n\n\tpublic void setApellidoMaterno(String apellidoMaterno) {\n\t\tthis.apellidoMaterno = apellidoMaterno;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0.0625,0,0.1625,0.0625,0,0.1625,0.0625,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]},{"nombre":"Docente.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\n\npublic class Docente extends Usuario {\n\n\tprivate static final long serialVersionUID = -9006610970991568315L;\n\tprivate String docenteId; // cÔøΩdigo del docente\n\tprivate String nombre;\n\tprivate String apellidoPaterno;\n\tprivate String apellidoMaterno;\n\n\tpublic String getDocenteId() {\n\t\treturn docenteId;\n\t}\n\n\tpublic void setDocenteId(String docenteId) {\n\t\tthis.docenteId = docenteId;\n\t}\n\n\tpublic String getNombre() {\n\t\treturn nombre;\n\t}\n\n\tpublic void setNombre(String nombre) {\n\t\tthis.nombre = nombre;\n\t}\n\n\tpublic String getApellidoPaterno() {\n\t\treturn apellidoPaterno;\n\t}\n\n\tpublic void setApellidoPaterno(String apellidoPaterno) {\n\t\tthis.apellidoPaterno = apellidoPaterno;\n\t}\n\n\tpublic String getApellidoMaterno() {\n\t\treturn apellidoMaterno;\n\t}\n\n\tpublic void setApellidoMaterno(String apellidoMaterno) {\n\t\tthis.apellidoMaterno = apellidoMaterno;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.375,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0.0625,0,0.1625,0.0625,0,0.1625,0.0625,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]},{"nombre":"ContainerResult.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.util.List;\n\npublic class ContainerResult {\n\n\tprivate List<ContainerChartResult> charResults;\n\n\tpublic ContainerResult(){\n\t\t\n\t}\n\t\n\tpublic List<ContainerChartResult> getCharResults() {\n\t\treturn charResults;\n\t}\n\n\tpublic void setCharResults(List<ContainerChartResult> charResults) {\n\t\tthis.charResults = charResults;\n\t}\n\t\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0.15625,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0]},{"nombre":"ContenedorPosicion.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.util.Collection;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Posicion;\n\npublic class ContenedorPosicion {\n\tprivate Collection<Posicion> posiciones;\n\t\n\tpublic ContenedorPosicion(){\n\t\t\n\t}\n\n\tpublic Collection<Posicion> getPosiciones() {\n\t\treturn posiciones;\n\t}\n\n\tpublic void setPosiciones(Collection<Posicion> posiciones) {\n\t\tthis.posiciones = posiciones;\n\t}\n\t\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0.15625,0,0.15625,0,0,0,0.31875,0,0.15625,0.00625,0,0,0,0,0.275,0,0]},{"nombre":"ContainerChartResult.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Codigo;\n\npublic class ContainerChartResult {\n\n\tprivate String fdtw;\n\tprivate Codigo codeFirstProyect;\n\tprivate Codigo codeSecondProyect;\n\tprivate String nameFirstProyect;\n\tprivate String nameSecondProyect;\n\t\n\tpublic ContainerChartResult(){\n\t\t\n\t}\n\t\n\tpublic String getFdtw() {\n\t\treturn fdtw;\n\t}\n\tpublic void setFdtw(String fdtw) {\n\t\tthis.fdtw = fdtw;\n\t}\n\tpublic Codigo getCodeFirstProyect() {\n\t\treturn codeFirstProyect;\n\t}\n\tpublic void setCodeFirstProyect(Codigo codeFirstProyect) {\n\t\tthis.codeFirstProyect = codeFirstProyect;\n\t}\n\tpublic Codigo getCodeSecondProyect() {\n\t\treturn codeSecondProyect;\n\t}\n\tpublic void setCodeSecondProyect(Codigo codeSecondProyect) {\n\t\tthis.codeSecondProyect = codeSecondProyect;\n\t}\n\tpublic String getNameFirstProyect() {\n\t\treturn nameFirstProyect;\n\t}\n\tpublic void setNameFirstProyect(String nameFirstProyect) {\n\t\tthis.nameFirstProyect = nameFirstProyect;\n\t}\n\tpublic String getNameSecondProyect() {\n\t\treturn nameSecondProyect;\n\t}\n\tpublic void setNameSecondProyect(String nameSecondProyect) {\n\t\tthis.nameSecondProyect = nameSecondProyect;\n\t}\n\t\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0.0625,0,0.1625,0,0,0.1625,0,0,0.1625,0.0625,0,0.1625,0.0625,0,0.15625,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]},{"nombre":"Resultado.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.io.Serializable;\n\npublic class Resultado implements Serializable {\n\n\tprivate static final long serialVersionUID = -7925312610348273400L;\n\tprivate Integer resultadoId;\n\tprivate Comparacion comparacion;\n\tprivate Double porcentajeTotal;\n\tprivate String clasesSimilares;\n\n\tpublic Integer getResultadoId() {\n\t\treturn resultadoId;\n\t}\n\n\tpublic void setResultadoId(Integer resultadoId) {\n\t\tthis.resultadoId = resultadoId;\n\t}\n\n\tpublic Comparacion getComparacion() {\n\t\treturn comparacion;\n\t}\n\n\tpublic void setComparacion(Comparacion comparacion) {\n\t\tthis.comparacion = comparacion;\n\t}\n\n\tpublic Double getPorcentajeTotal() {\n\t\treturn porcentajeTotal;\n\t}\n\n\tpublic void setPorcentajeTotal(Double porcentajeTotal) {\n\t\tthis.porcentajeTotal = porcentajeTotal;\n\t}\n\n\tpublic String getClasesSimilares() {\n\t\treturn clasesSimilares;\n\t}\n\n\tpublic void setClasesSimilares(String clasesSimilares) {\n\t\tthis.clasesSimilares = clasesSimilares;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.06875,0,0.1625,0,0,0.1625,0.075,0,0.1625,0.0625,0,0.15625,0.06875,0,0.31875,0,0.15625,0.00625,0,0.06875,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0.075,0,0.31875,0,0.15625,0.00625,0,0.075,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]},{"nombre":"Usuario.java","contenido":"package pe.edu.eapisw.codecomparator.beans.model;\n\nimport java.io.Serializable;\n\npublic class Usuario implements Serializable {\n\n\tprivate static final long serialVersionUID = 7745777303227616952L;\n\tprivate String usuario;\n\tprivate String password;\n\n\tpublic String getUsuario() {\n\t\treturn usuario;\n\t}\n\n\tpublic void setUsuario(String usuario) {\n\t\tthis.usuario = usuario;\n\t}\n\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n\tpublic void setPassword(String password) {\n\t\tthis.password = password;\n\t}\n\n\t@Override\n\tpublic boolean equals(Object anotherObject) {\n\t\tif (anotherObject instanceof Usuario) {\n\t\t\tif (((Usuario) anotherObject).getUsuario().equals(usuario)) {\n\t\t\t\tif (((Usuario) anotherObject).getPassword().equals(password)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0.175,0.18125,0.03125,0,0,0.1625,0.0625,0,0.1625,0.0625,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.04375,0,0,0,0.2875,0,0.28125,0,0.2875,0,0,0,0,0,0.2875,0,0,0,0,0]}],"paquetes":[]}]},{"nombre":"service","codigos":[{"nombre":"ComparisonService.java","contenido":"package pe.edu.eapisw.codecomparator.service;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Codigo;\nimport pe.edu.eapisw.codecomparator.beans.json.Evaluacion;\nimport pe.edu.eapisw.codecomparator.beans.json.Proyecto;\nimport pe.edu.eapisw.codecomparator.beans.model.ContainerChartResult;\nimport pe.edu.eapisw.codecomparator.beans.model.Docente;\n\npublic interface ComparisonService {\n\t/**\n\t * Carga las evaluaciones pertenecientes al <code>docente</code>.\n\t * \n\t * @param docente\n\t * @return <code>Evaluaciones</code>\n\t */\n\tpublic Collection<Evaluacion> getEvaluaciones(Docente docente);\n\t\n\tpublic List<ContainerChartResult> comparisionProject(Proyecto project1,\n\t\t\tProyecto project2);\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.25625,0,0.15625,0,0,0,0,0,0.15625,0,0,0,0,0,0,0]},{"nombre":"UserService.java","contenido":"package pe.edu.eapisw.codecomparator.service;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Usuario;\n\npublic interface UserService {\n\tpublic Usuario getUsuario();\n\tpublic Usuario loginDocente(Usuario usuario);\n\tpublic void crearCuentaDocente(Usuario usuario);\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.25625,0,0.15625,0,0,0.15625,0,0,0,0,0.15625,0.00625,0,0,0]}],"paquetes":[{"nombre":"impl","codigos":[{"nombre":"ComparisonServiceImpl.java","contenido":"package pe.edu.eapisw.codecomparator.service.impl;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.springframework.stereotype.Service;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Codigo;\nimport pe.edu.eapisw.codecomparator.beans.json.Evaluacion;\nimport pe.edu.eapisw.codecomparator.beans.json.Paquete;\nimport pe.edu.eapisw.codecomparator.beans.json.Proyecto;\nimport pe.edu.eapisw.codecomparator.beans.model.ContainerChartResult;\nimport pe.edu.eapisw.codecomparator.beans.model.Curso;\nimport pe.edu.eapisw.codecomparator.beans.model.Docente;\nimport pe.edu.eapisw.codecomparator.persistence.DropboxClient;\nimport pe.edu.eapisw.codecomparator.persistence.impl.DropboxClientImpl;\nimport pe.edu.eapisw.codecomparator.service.ComparisonService;\nimport pe.edu.eapisw.codecomparator.service.core.fdtw.FDTW;\nimport pe.edu.eapisw.codecomparator.util.JSONUtil;\n\n@Service(\"comparisonService\")\npublic class ComparisonServiceImpl implements ComparisonService {\n\n\tprivate Collection<Evaluacion> evaluaciones = new ArrayList<Evaluacion>();\n\n\tprivate JSONUtil jsonUtil = new JSONUtil();\n\t// TODO: reorganizar estos objetos para manipularlos con Spring\n\tprivate DropboxClient dropboxUploader = new DropboxClientImpl();\n\t\n\tprivate Codigo code2 = new Codigo();\n\tprivate Double min = new Double(0); \n\n\t@Override\n\tpublic Collection<Evaluacion> getEvaluaciones(Docente docente) {\n\t\tevaluaciones.clear();\n\t\t// simulo traer un todos los cursos del docente\n\t\tCurso algoritmica = new Curso();\n\t\talgoritmica.setCursoId(1);\n\t\talgoritmica.setGrupo(2);\n\t\talgoritmica.setNombre(\"AlgorÔøΩtmica II\");\n\n\t\t// traigo todas las evaluaciones de este curso\n\t\tEvaluacion eva1 = new Evaluacion();\n\t\teva1.setEvaluacionId(1);\n\t\teva1.setCurso(algoritmica);\n\t\tList<Evaluacion> evs = new ArrayList<Evaluacion>();\n\t\tevs.add(eva1);\n\n\t\tString docenteId = \"/\" + docente.getDocenteId();\n\t\tString nombreCurso;\n\t\tString evaluacionId;\n\t\tString srcFilename;\n\t\tfor (Evaluacion evaluacion : evs) {\n\t\t\tnombreCurso = \"/\" + evaluacion.getCurso().getNombre();\n\t\t\tevaluacionId = \"/\" + String.valueOf(evaluacion.getEvaluacionId());\n\t\t\tsrcFilename = docenteId + nombreCurso + evaluacionId + \".json\";\n\n\t\t\tthis.evaluaciones\n\t\t\t\t\t.add((Evaluacion) jsonUtil.toObject(\n\t\t\t\t\t\t\tdropboxUploader\n\t\t\t\t\t\t\t\t\t.download(\n\t\t\t\t\t\t\t\t\t\t\t\"Ns9nnNqlFpIAAAAAAAAABan7kFFoWTdnaddpwnxh_8DMeMHrBX1PORlMrPs2qGo6\",\n\t\t\t\t\t\t\t\t\t\t\tsrcFilename), Evaluacion.class));\n\t\t}\n\n\t\treturn evaluaciones;\n\t}\n\t\n\n\t//\n\t\n\t/**\n\t * MÔøΩtodo inicial de comparaciÔøΩn de proyectos\n\t * @author MarÔøΩaAlejandra (oshingc)\n\t * @param Proyecto project1\n\t * @param Proyecto project2\n\t * \n\t * */\n\t\n\t@Override\n\tpublic List<ContainerChartResult> comparisionProject(Proyecto project1,\n\t\t\tProyecto project2) {\n\t\tList<ContainerChartResult> containers = new ArrayList<ContainerChartResult>();\n\n\t\ttravelComparisionProject(project1, project2, containers);\n\t\treturn containers;\n\t}\n\t\n\tprivate Double compareFiles(Codigo code1, Codigo code2) {\n        FDTW fdtw = new FDTW();\n        fdtw.SetSequences(code1.getQ(), code2.getQ());\n        Double a = fdtw.GetDistance();\n        return a;\n\t}\n\t\n\tprivate void travelComparisionProject(Proyecto project1, Proyecto project2,\n\t\t\tList<ContainerChartResult> containers) {\n\t\tArrayList<Codigo> codes = (ArrayList<Codigo>) project1.getCodigos();\n\t\tArrayList<Paquete> packages = (ArrayList<Paquete>) project1.getPaquetes();\n\n\t\tfor (Codigo code : codes) {\n\t\t\tthis.code2 = new Codigo();\n\t\t\tthis.min = new Double(Double.MAX_VALUE);\n\t\t\ttravelComparisionMinProject(project2, code);\n\n\t\t\tContainerChartResult container = new ContainerChartResult();\n\n\t\t\tcontainer.setCodeFirstProyect(code);\n\t\t\tcontainer.setCodeSecondProyect(this.code2);\n\t\t\tcontainer.setFdtw(String.valueOf(this.min));\n\t\t\tcontainer.setNameFirstProyect(project1.getNombre());\n\t\t\tcontainer.setNameSecondProyect(project2.getNombre());\n\t\t\t//container.setChartOne(this.generateGraphic(code));\n\t\t\t//container.setChartTwo(this.generateGraphic(this.code2));\n\t\t\tcontainers.add(container);\n\t\t}\n\n\t\tfor (Paquete _package : packages) {\n\t\t\ttravelComparisionProject(_package, project1, project2, containers);\n\t\t}\n\n\t}\n\t\n\t\n\tprivate void travelComparisionProject(Paquete package1, Proyecto project1,\n\t\t\tProyecto project2, List<ContainerChartResult> containers) {\n\t\tArrayList<Codigo> codes = (ArrayList<Codigo>) package1.getCodigos();\n\t\tArrayList<Paquete> packages = (ArrayList<Paquete>) package1\n\t\t\t\t.getPaquetes();\n\n\t\tfor (Codigo code : codes) {\n\t\t\tthis.code2 = new Codigo();\n\t\t\tthis.min = new Double(Double.MAX_VALUE);\n\t\t\ttravelComparisionMinProject(project2, code);\n\t\t\tContainerChartResult container = new ContainerChartResult();\n\t\t\tcontainer.setCodeFirstProyect(code);\n\t\t\tcontainer.setCodeSecondProyect(this.code2);\n\t\t\tcontainer.setFdtw(String.valueOf(this.min));\n\t\t\tcontainer.setNameFirstProyect(project1.getNombre());\n\t\t\tcontainer.setNameSecondProyect(project2.getNombre());\n\n\t\t\t//container.setChartOne(this.generateGraphic(code));\n\t\t\t//container.setChartTwo(this.generateGraphic(this.code2));\n\n\t\t\tcontainers.add(container);\n\n\t\t}\n\n\t\tfor (Paquete _package : packages) {\n\t\t\ttravelComparisionProject(_package, project1, project2, containers);\n\t\t}\n\n\t}\n\t\n\t\n\tprivate void travelComparisionMinProject(Proyecto project2, Codigo code1) {\n\n\t\tArrayList<Codigo> codes = (ArrayList<Codigo>) project2.getCodigos();\n\t\tArrayList<Paquete> packages = (ArrayList<Paquete>) project2\n\t\t\t\t.getPaquetes();\n\n\t\tfor (Codigo code : codes) {\n\t\t\tDouble rpt = compareFiles(code1, code);\n\t\t\tif (rpt < this.min) {\n\t\t\t\tthis.code2 = code;\n\t\t\t\tthis.min = new Double(rpt);\n\t\t\t}\n\t\t}\n\n\t\tfor (Paquete _package : packages) {\n\t\t\ttravelComparisionMinProject(_package, code1);\n\t\t}\n\n\t}\n\n\tprivate void travelComparisionMinProject(Paquete package2, Codigo code1) {\n\n\t\tArrayList<Codigo> codes = (ArrayList<Codigo>) package2.getCodigos();\n\t\tArrayList<Paquete> packages = (ArrayList<Paquete>) package2\n\t\t\t\t.getPaquetes();\n\n\t\tfor (Codigo code : codes) {\n\t\t\tDouble rpt = compareFiles(code1, code);\n\t\t\tif (rpt < this.min) {\n\t\t\t\tthis.code2 = code;\n\t\t\t\tthis.min = new Double(rpt);\n\t\t\t}\n\t\t}\n\n\t\tfor (Paquete _package : packages) {\n\t\t\ttravelComparisionMinProject(_package, code1);\n\t\t}\n\n\t}\n\t\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.1625,0,0,0,0,0,0.1625,0,0,0,0.1625,0,0,0,0.1625,0,0,0,0.1625,0.075,0,0.075,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0.0625,0,0.0625,0,0.0625,0,0.11875,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0.275,0,0,0,0,0,0,0,0,0.2375,0.31875,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0,0,0,0.31875,0,0.1625,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0.275,0,0,0.275,0,0.075,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0,0,0,0.0625,0,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0,0,0,0,0,0.1625,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0.275,0,0,0.275,0,0.075,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0,0,0,0.0625,0,0.275,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0,0,0,0,0,0.1625,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0.075,0,0,0,0,0.2875,0,0.275,0,0.275,0,0,0.275,0,0.075,0,0.11875,0,0,0,0,0,0,0.1625,0.00625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0,0,0,0.075,0,0,0,0,0.2875,0,0.275,0,0.275,0,0,0.275,0,0.075,0,0.11875,0,0,0,0,0,0]},{"nombre":"UserServiceImpl.java","contenido":"package pe.edu.eapisw.codecomparator.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Usuario;\nimport pe.edu.eapisw.codecomparator.persistence.UserMapper;\nimport pe.edu.eapisw.codecomparator.service.UserService;\n\n@Service(\"usuarioService\")\npublic class UserServiceImpl implements UserService {\n\n\t/*@Autowired\n\tpublic UserMapper userMapper;*/\n\t\n\t@Override\n\tpublic Usuario getUsuario() {\n\t\tUsuario usuario = new Usuario();\n\t\tusuario.setUsuario(\"oshingc\");\n\t\tusuario.setPassword(\"123456\");\n\t\treturn usuario;\n\t}\n\n\t@Override\n\tpublic Usuario loginDocente(Usuario usuario) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void crearCuentaDocente(Usuario usuario) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t/*@Override\n\tpublic Usuario loginDocente(Usuario usuario) {\n\t\treturn userMapper.loginDocente(usuario);\t\t\n\t}\n\n\t@Override\n\tpublic void crearCuentaDocente(Usuario usuario) {\n\t\tuserMapper.crearCuentaDocente(usuario);\t\t\n\t}*/\n\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.15625,0,0,0,0,0.31875,0,0.15625,0.00625,0,0,0]}],"paquetes":[]},{"nombre":"core","codigos":[],"paquetes":[{"nombre":"converter","codigos":[{"nombre":"Item.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.converter;\n\npublic class Item {\n\n\tprivate double value; // valor\n\tprivate String id; // operador\n\n\tpublic Item(double value, String id) {\n\t\tthis.value = value;\n\t\tthis.id = id;\n\t}\n\n\tpublic double getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(double value) {\n\t\tthis.value = value;\n\t}\n\n\tpublic String getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0.05625,0,0.1625,0.0625,0,0.15625,0,0.05625,0,0.0625,0,0.275,0,0,0.275,0,0,0.15625,0.05625,0,0.31875,0,0.15625,0.00625,0,0.05625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]},{"nombre":"TokenCategory.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.converter;\n\npublic class TokenCategory {\n\n\tprivate String name; // categorÔøΩa\n\tprivate Item[] objects; // operador\n\tprivate double value; // fi\n\n\tpublic TokenCategory() {\n\t\tsuper();\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setObjects(Item[] objects) {\n\t\tthis.objects = objects;\n\t}\n\n\tpublic Item[] getObjects() {\n\t\treturn objects;\n\t}\n\n\tpublic void setValue(double value) {\n\t\tthis.value = value;\n\t}\n\n\tpublic double getValue() {\n\t\treturn value;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0.0625,0,0.1625,0,0,0.1625,0.05625,0,0.15625,0,0.15625,0.00625,0,0.0625,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0,0.15625,0,0,0.31875,0,0.15625,0.00625,0,0.05625,0,0.275,0,0,0.15625,0.05625,0,0.31875,0]},{"nombre":"CodeConverter.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.converter;\n\nimport java.io.BufferedReader;\nimport java.util.ArrayList;\n\n/**\n * Clase que implementa los mÔøΩtodos de conversiÔøΩn del cÔøΩdigo fuente.\n * \n */\npublic class CodeConverter {\n\t// public String file;\n\tprivate BufferedReader file;\n\tprivate ArrayList<String> codeLines = new ArrayList<String>();\n\tpublic ArrayList<CodeImage> convertedCode = new ArrayList<CodeImage>();\n\tpublic boolean IsCategoryLevel;\n\n\tpublic Double[] Q;\n\tpublic StartUp config;\n\n\tpublic String[] split(String value, String[] separators) {\n\t\tString[] words = null;\n\t\tArrayList<String> temp = new ArrayList<>();\n\t\tfor (String separator : separators) {\n\t\t\tvalue = value.replaceAll(separator, \"ÔøΩ\");\n\t\t}\n\t\twords = value.split(\"ÔøΩ\");\n\t\tfor (String word : words) {\n\t\t\tif (!word.isEmpty())\n\t\t\t\ttemp.add(word);\n\t\t}\n\t\twords = new String[temp.size()];\n\t\ttemp.toArray(words);\n\t\treturn words;\n\t}\n\n\tprivate String insert(String source, int index, String pattern) {\n\t\tString out = source.substring(0, index) + pattern\n\t\t\t\t+ source.substring(index);\n\t\treturn out;\n\t}\n\n\t/**\n\t * Remueve los comentarios del archivo fuente y divide el cÔøΩdigo en\n\t * instrucciones, que se almacenarÔøΩn en un ArrayList\n\t */\n\tprivate void RemoveComments() {\n\t\tString line = \"--\";\n\t\ttry {\n\t\t\tBufferedReader br = file;\n\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\tint index;\n\t\t\t\t// Es comentario simple\n\t\t\t\tif (line.contains(\"//\")) {\n\t\t\t\t\tindex = line.indexOf(\"//\");\n\t\t\t\t\tline = line.substring(0, index);\n\t\t\t\t}\n\t\t\t\t// Es comentario multiple\n\t\t\t\telse if (line.contains(\"/*\")) {\n\t\t\t\t\tindex = line.indexOf(\"/*\");\n\t\t\t\t\twhile (!line.contains(\"*/\")) {\n\t\t\t\t\t\tindex = -1;\n\t\t\t\t\t\tline = br.readLine();\n\t\t\t\t\t\t// line = sr.ReadLine();\n\t\t\t\t\t}\n\t\t\t\t\tint index2 = line.indexOf(\"*/\");\n\t\t\t\t\tif (index2 >= 0 && index != -1) {\n\t\t\t\t\t\tline = line.substring(0, index)\n\t\t\t\t\t\t\t\t+ line.substring(index + (index2 + 2));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tline = line.substring(0, 0)\n\t\t\t\t\t\t\t\t+ line.substring(0 + (index2 + 2));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Dividir las lineas de codigo en instrucciones\n\t\t\t\tString[] se = new String[] { \"\\t\", \"\\n\", \"\\r\", \";\" };\n\t\t\t\tString[] tokens = split(line, se);\n\t\t\t\tfor (String token : tokens) {\n\t\t\t\t\tif (!token.equals(\"\")) {\n\t\t\t\t\t\tcodeLines.add(token);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * De las instrucciones almacenadas en <code>codeLines</code>, se remueven\n\t * las directivas <code>import</code> para cÔøΩdigos Java.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void RemoveDirectives() {\n\t\tArrayList<String> temp = new ArrayList<String>();\n\t\tString t;\n\t\tfor (int index = 0; index < codeLines.size(); index++) {\n\t\t\tt = (String) codeLines.get(index);\n\t\t\tif (t.contains(\"import\")) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\ttemp.add(codeLines.get(index));\n\t\t\t}\n\t\t}\n\t\tcodeLines.clear();\n\t\tcodeLines = (ArrayList<String>) temp.clone();\n\t\ttemp.clear();\n\t}\n\n\t/**\n\t * MÔøΩtodos principales, convierten las instrucciones en valores numÔøΩricos,\n\t * dependiendo del metodo que se utilize TransformCodeOperatorLevel o\n\t * TransformCodeCategoryLevel [codificaciÔøΩn en detalle].\n\t */\n\t@SuppressWarnings(\"static-access\")\n\tpublic final void TransformCodeOperatorLevel() {\n\t\ttry {\n\t\t\tRemoveComments();\n\t\t\tRemoveDirectives();\n\t\t\tIsCategoryLevel = false;\n\n\t\t\t/*\n\t\t\t * En el arreglo split deben encontrarse todos los operadores del\n\t\t\t * lenguaje ademÔøΩs de los separadores de clase y de funciÔøΩn\n\t\t\t */\n\t\t\tString[] se = new String[] { \"[{]+\", \"}\", \" \" };\n\t\t\tString[] split = new String[config.operators.length + se.length];\n\t\t\t// config.operators.CopyTo(split, 0);\n\t\t\tSystem.arraycopy(config.operators, 0, split, 0,\n\t\t\t\t\tconfig.operators.length);\n\t\t\tSystem.arraycopy(se, 0, split, config.operators.length, se.length);\n\n\t\t\tString line;\n\t\t\tfor (int index = 0; index < codeLines.size(); index++) {\n\t\t\t\tline = (String) codeLines.get(index);\n\t\t\t\t// String[] tokens = line.Split(split,\n\t\t\t\t// StringSplitOptions.RemoveEmptyEntries);\n\t\t\t\tString[] tokens = split(line, split);\n\t\t\t\tString operaciones = line;\n\n\t\t\t\t/*\n\t\t\t\t * Diferencia del vector de tokens con la lÔøΩnea de cÔøΩdigo para\n\t\t\t\t * obtener las operaciones que afectan a esa lÔøΩnea\n\t\t\t\t */\n\t\t\t\tfor (int i = 0; i < tokens.length; i++) {\n\t\t\t\t\tif (operaciones.contains(tokens[i])) {\n\t\t\t\t\t\tint ind = operaciones.indexOf(tokens[i]);\n\t\t\t\t\t\toperaciones = operaciones.substring(0, ind)\n\t\t\t\t\t\t\t\t+ operaciones.substring(ind\n\t\t\t\t\t\t\t\t\t\t+ tokens[i].length());\n\t\t\t\t\t\t// operaciones = operaciones.insert(ind, \"ÔøΩ\");\n\t\t\t\t\t\toperaciones = insert(operaciones, ind, \"ÔøΩ\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tArrayList<Double> token_line = new ArrayList<Double>();\n\t\t\t\tint pos = 0;\n\t\t\t\tfor (int j = 0; j < operaciones.length(); j++) {\n\t\t\t\t\t// if (operaciones.charAt(j).equals('ÔøΩ')) {\n\t\t\t\t\tif (operaciones.charAt(j) == 'ÔøΩ') {\n\t\t\t\t\t\ttoken_line.add(TokenValue(tokens[pos++]));\n\t\t\t\t\t}\n\t\t\t\t\t// else if (operaciones.charAt(j).toString().equals(\" \") ==\n\t\t\t\t\t// false\n\t\t\t\t\t// && operaciones.charAt(j).toString().equals(\"{\") == false\n\t\t\t\t\t// && operaciones.charAt(j).toString().equals(\"}\") == false)\n\t\t\t\t\t// {\n\t\t\t\t\telse if (operaciones.charAt(j) == ' '\n\t\t\t\t\t\t\t&& operaciones.charAt(j) == '{'\n\t\t\t\t\t\t\t&& operaciones.charAt(j) == '}') {\n\t\t\t\t\t\tint next_quote = operaciones.indexOf(\"ÔøΩ\", j);\n\t\t\t\t\t\tString op;\n\t\t\t\t\t\tif (next_quote > j) {\n\t\t\t\t\t\t\top = operaciones.substring(j, next_quote);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\top = operaciones.substring(j, operaciones.length());\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttoken_line.add(TokenValue(op));\n\t\t\t\t\t\tif (next_quote != -1) {\n\t\t\t\t\t\t\tj = next_quote - 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (token_line.size() > 1) {\n\t\t\t\t\tCodeImage ci = new CodeImage(token_line, line);\n\t\t\t\t\t// ci.code_line = line;\n\t\t\t\t\t// ci.code_img = token_line;\n\t\t\t\t\tconvertedCode.add(ci);\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList<Double> temp = new ArrayList<Double>();\n\t\t\t// if (((Code_Image) converted_code.get(0)).code_img[0].getClass()\n\t\t\t// .getName().equals(\"Double\")) {\n\t\t\tif (convertedCode.get(0).getCode_img().get(0) instanceof Double) {\n\t\t\t\tfor (CodeImage TkLn : convertedCode) {\n\t\t\t\t\tfor (double val : TkLn.getCode_img()) {\n\t\t\t\t\t\ttemp.add(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// this.Q = (double[]) temp.toArray(new double[0]);\n\t\t\t\tthis.Q = new Double[temp.size()];\n\t\t\t\ttemp.toArray(this.Q);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t// public final void TransformCodeCategoryLevel() {\n\t// RemoveComments();\n\t// RemoveDirectives();\n\t// IsCategoryLevel = true;\n\t//\n\t// String[] se = new String[] { \"{\", \"}\", \" \" };\n\t// String[] split = new String[config.operators.getLength() + se.length];\n\t// config.operators.CopyTo(split, 0);\n\t// System.arraycopy(se, 0, split, config.operators.getLength(), se.length);\n\t// String line;\n\t// int openPh = 0;\n\t// for (int index = 0; index < code_lines.size(); index++) {\n\t// line = (String) code_lines.get(index);\n\t// String[] tokens = line.split(split,\n\t// StringSplitOptions.RemoveEmptyEntries);\n\t// String operaciones = line;\n\t// for (int i = 0; i < tokens.length; i++) {\n\t// if (operaciones.contains(tokens[i])) {\n\t// int ind = operaciones.indexOf(tokens[i]);\n\t// operaciones = operaciones.substring(0, ind)\n\t// + operaciones.substring(ind + tokens[i].length());\n\t// operaciones = operaciones.insert(ind, \"ÔøΩ\");\n\t// }\n\t// }\n\t// java.util.ArrayList token_line = new java.util.ArrayList();\n\t// operaciones = operaciones.trim();\n\t// String[] ops = operaciones.split(new char[] { 'ÔøΩ', ' ' },\n\t// StringSplitOptions.RemoveEmptyEntries);\n\t// for (String s1 : ops) {\n\t// String s = s1.trim();\n\t// if (s.contains(\"(\")) {\n\t// openPh++;\n\t// token_line.add(CatValue(\"(\"));\n\t// int ind = s.indexOf(\"(\");\n\t// String s2;\n\t// if (ind >= 0) {\n\t// s2 = s.substring(0, ind) + s.substring(ind + 1);\n\t// if (!s2.equals(\"\")) {\n\t// token_line.add(CatValue(s2));\n\t// }\n\t// }\n\t// } else if (s.equals(\")\")) {\n\t// openPh--;\n\t// } else if (s.equals(\"))\")) {\n\t// openPh--;\n\t// } else if (s.contains(\")\")) {\n\t// token_line.add(CatValue(\")\"));\n\t// int ind = s.indexOf(\")\");\n\t// String s2;\n\t// if (ind >= 0) {\n\t// s2 = s.substring(0, ind) + s.substring(ind + 1);\n\t// if (!s2.equals(\"\") && !s2.equals(\")\")) {\n\t// token_line.add(CatValue(s2));\n\t// }\n\t// }\n\t// } else if (s.equals(\"{\") == false && s.equals(\"}\") == false\n\t// && s.equals(\"\") == false) {\n\t// double v = CatValue(s);\n\t// if (v != Double.MAX_VALUE) {\n\t// token_line.add(CatValue(s));\n\t// } else {\n\t// System.out.println(\"Error: TOKEN{0} LINE{1}\", s, line);\n\t// }\n\t// }\n\t// }\n\t//\n\t// if (token_line.size() > 0) {\n\t// Code_Image ci = new Code_Image();\n\t// ci.code_line = line;\n\t// ci.code_img = token_line;\n\t// converted_code.add(ci);\n\t// }\n\t// }\n\t// java.util.ArrayList temp = new java.util.ArrayList();\n\t// if (((Code_Image) converted_code.get(0)).code_img[0].getClass()\n\t// .getName().equals(\"Double\")) {\n\t// for (Code_Image TkLn : converted_code) {\n\t// for (double val : TkLn.code_img) {\n\t// temp.add(val);\n\t// }\n\t// }\n\t// this.Q = (double[]) temp.toArray(new double[0]);\n\t// }\n\t// temp.clear();\n\t// }\n\t//\n\t/*\n\t * Funci√≥n que retorna el valor del token, es invocada desde\n\t * TransformCodeOperatorLevel\n\t */\n\t@SuppressWarnings({ \"unused\", \"static-access\" })\n\tprivate double TokenValue(String _token) {\n\t\t// Arreglo de palabras reservadas\n\t\tArrayList<Item> reserved = config.reserved;\n\t\t// Arreglo de clases de operadores\n\t\tArrayList<TokenCategory> categories = config.categories;\n\t\tboolean found = false;\n\t\tString token = _token.trim();\n\t\tdouble value = Double.MAX_VALUE;\n\t\t// Buscar en las palabras reservadas\n\t\tfor (Item word : reserved) {\n\t\t\tif (token.compareTo(word.getId()) == 0) {\n\t\t\t\tfound = true;\n\t\t\t\tvalue = word.getValue();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (found) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\t// Buscar en los operadores\n\t\t\tfor (TokenCategory cat : categories) {\n\t\t\t\tfor (int i = 0; i < cat.getObjects().length; i++) {\n\t\t\t\t\tItem j = ((Item) cat.getObjects()[i]);\n\t\t\t\t\tif (token.compareTo(j.getId()) == 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tvalue = j.getValue();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (found) {\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\t// Realizar un cast, para determinar si es una constante\n\t\t\t\ttry {\n\t\t\t\t\tdouble L = Double.parseDouble(token);\n\t\t\t\t\tfound = true;\n\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\tfound = false;\n\t\t\t\t}\n\t\t\t\tif (found) // i.e value = 0.7\n\t\t\t\t{\n\t\t\t\t\treturn value = config.constant_value;\n\t\t\t\t} else {\n\t\t\t\t\t// En caso contrario es una variable i.e value = 0.9\n\t\t\t\t\treturn value = config.variable_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t// /*\n\t// * Funci√≥n que retorna el valor de la categoria de un operador, es\n\t// invocada\n\t// * desde TransformCodeCategoryLevel\n\t// */\n\t// private double CatValue(String _token) {\n\t// // Arreglo de clases de operadores\n\t// java.util.ArrayList categories = config.categories;\n\t// String token = _token.trim();\n\t// double value = Double.MAX_VALUE();\n\t// // Buscar en los operadores\n\t// for (TokenCategory cat : categories) {\n\t// for (int i = 0; i < cat.objects.size(); i++) {\n\t// Item j = ((Item) cat.objects[i]);\n\t// if (token.compareTo(j.id) == 0) {\n\t// value = cat.value;\n\t// break;\n\t// }\n\t// }\n\t// }\n\t// return value;\n\t// }\n\t//\n\t// /*\n\t// * Una vez que se ha identificado un token, se busca en la lista de\n\t// palabras\n\t// * reservadas, en el arreglo de operadores, de no encontrarse, se\n\t// identifica\n\t// * como constante num√©rica o variable. Este m√©todo s√≥lo se utiliza para\n\t// * escribir a un archivo el tipo de operador que le corresponde. Es\n\t// invocado\n\t// * por WriteFileTransform().\n\t// */\n\t// private String TokenType(double value) {\n\t// // Arreglo de palabras reservadas\n\t// java.util.ArrayList reserved = config.reserved;\n\t// // Arreglo de clases de operadores\n\t// java.util.ArrayList categories = config.categories;\n\t// boolean found = false;\n\t// for (Item word : reserved) {\n\t// if (word.value = value) {\n\t// found = true;\n\t// break;\n\t// }\n\t// }\n\t// if (found) {\n\t// return \"RESERVED\";\n\t// } else {\n\t// // Buscar en los operadores\n\t// for (TokenCategory cat : categories) {\n\t// for (int i = 0; i < cat.objects.size(); i++) {\n\t// Item j = ((Item) cat.objects[i]);\n\t// if (j.value = value) {\n\t// found = true;\n\t// break;\n\t// }\n\t// }\n\t// }\n\t// if (found) {\n\t// return \"OPERATOR\";\n\t// } else {\n\t// if (value == config.constant_value) {\n\t// return \"CONSTANT\";\n\t// } else if (value == config.variable_value) {\n\t// // En caso contrario es una variable\n\t// return \"VARIABLE\";\n\t// } else {\n\t// return null;\n\t// }\n\t// }\n\t// }\n\t// }\n\n\tpublic ArrayList<String> getCodeLines() {\n\t\treturn codeLines;\n\t}\n\n\tpublic void setFile(BufferedReader file) {\n\t\tthis.file = file;\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0.1625,0,0.0625,0,0,0.0625,0.15625,0,0,0,0,0,0.15625,0.04375,0,0.15625,0.075,0,0.15625,0,0,0.15625,0.0625,0,0.0625,0,0.0625,0,0.0625,0,0,0,0.0625,0,0,0.11875,0.0625,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.0625,0,0,0.2875,0,0,0,0,0,0,0.0625,0,0,0,0,0,0.31875,0,0.1625,0.0625,0,0.0625,0,0.01875,0,0.0625,0,0.0625,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.00625,0,0.0625,0,0,0,0,0,0,0.13125,0,0,0,0,0.01875,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01875,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0.0625,0,0,0,0,0.0625,0,0,0,0,0.11875,0.0625,0,0,0.2875,0,0,0,0,0,0,0.3375,0,0,0,0,0,0,0.1625,0.00625,0,0,0.0625,0,0,0.0625,0.0625,0,0.11875,0.01875,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0.15625,0.18125,0.00625,0,0.0625,0,0.0625,0,0,0,0,0,0,0.0625,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0.11875,0.01875,0,0,0,0,0,0,0.0625,0,0,0,0.0625,0,0,0,0,0.0625,0,0,0.11875,0.01875,0,0,0,0,0,0.2875,0,0,0,0,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0,0,0.075,0.01875,0,0,0.11875,0.01875,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0.29375,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.01875,0,0,0,0,0,0.0625,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0,0,0.075,0.2875,0,0,0,0,0,0,0.28125,0.075,0.11875,0,0,0,0.11875,0.05625,0,0,0,0,0,0,0.275,0,0.075,0,0,0,0,0.275,0,0.3375,0,0,0,0,0,0,0,0,0.1625,0.05625,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0.04375,0,0.0625,0,0,0,0.05625,0,0.075,0,0.11875,0,0,0,0.2875,0,0,0,0,0,0,0,0,0.2875,0,0.31875,0,0.11875,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0.2875,0,0.31875,0,0.05625,0,0.075,0,0,0.3375,0,0,0.2875,0,0.31875,0,0,0,0.31875,0,0,0,0.15625,0,0.0625,0,0.31875,0,0.15625,0.00625,0,0,0,0.275,0,0]},{"nombre":"StartUp.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.converter;\n\nimport java.util.ArrayList;\n\n/**\n * Esta clase se encarga de cargar los valores que identifican la sintaxis de un\n * lenguaje orientado a objetos.\n *\n */\npublic class StartUp {\n\n\tpublic static ArrayList<TokenCategory> categories = loadCategories();\n\tpublic static ArrayList<Item> reserved = loadReservedWords();\n\tpublic static double constant_value;\n\tpublic static double variable_value;\n\tpublic static String[] operators = new String[] { \"[+]\", \"[-]\", \"[*]\", \"/\",\n\t\t\t\"%\", \"&\", \"[|]\", \"[\\\\^]\", \"!\", \"~\", \"&&\", \"[||]\", \"true\", \"false\",\n\t\t\t\"[+]\", \"[++]\", \"--\", \"<<\", \">>\", \"==\", \"!=\", \"<\", \">\", \"<=\", \">=\",\n\t\t\t\"=\", \"[+=]\", \"-=\", \"[*=]\", \"/=\", \"%=\", \"&=\", \"^=\", \"<<=\", \">>=\",\n\t\t\t\"[??]\", \"[.]\", \"[\\\\[]\", \"]\", \"[(]\", \"[)]\", \"[?:]\", \"new\" };\n\n\tprivate static ArrayList<TokenCategory> loadCategories() {\n\t\tArrayList<TokenCategory> out = new ArrayList<TokenCategory>();\n\t\tint er = 34;\n\t\ter = er ^ er;\n\t\tTokenCategory category = new TokenCategory();\n\t\tcategory.setName(\"arithmetic\");\n\t\tcategory.setObjects(arithmetic());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"logical\");\n\t\tcategory.setObjects(logical());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"concatenation\");\n\t\tcategory.setObjects(concatenation());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"incDec\");\n\t\tcategory.setObjects(incDec());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"shift\");\n\t\tcategory.setObjects(shift());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"relational\");\n\t\tcategory.setObjects(relational());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"assignment\");\n\t\tcategory.setObjects(assignment());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"memberAccess\");\n\t\tcategory.setObjects(memberAccess());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"indexing\");\n\t\tcategory.setObjects(indexing());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"cast\");\n\t\tcategory.setObjects(cast());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"conditional\");\n\t\tcategory.setObjects(conditional());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\tcategory = new TokenCategory();\n\t\tcategory.setName(\"objectCreation\");\n\t\tcategory.setObjects(objectCreation());\n\t\tcategory.setValue(category.getObjects()[0].getValue());\n\t\tout.add(category);\n\n\t\treturn out;\n\t}\n\n\tprivate static ArrayList<Item> loadReservedWords() {\n\t\tArrayList<Item> out = new ArrayList<Item>();\n\t\tout.add(new Item(0.00625, \"void\"));\n\t\tout.add(new Item(0.01250, \"byte\"));\n\t\tout.add(new Item(0.01875, \"int\"));\n\t\tout.add(new Item(0.02500, \"short\"));\n\t\tout.add(new Item(0.03125, \"long\"));\n\t\tout.add(new Item(0.03750, \"float\"));\n\t\tout.add(new Item(0.04375, \"boolean\"));\n\t\tout.add(new Item(0.05000, \"char\"));\n\t\tout.add(new Item(0.05625, \"double\"));\n\t\tout.add(new Item(0.06250, \"String\"));\n\t\tout.add(new Item(0.06875, \"Integer\"));\n\t\tout.add(new Item(0.07500, \"Double\"));\n\t\tout.add(new Item(0.08125, \"Float\"));\n\t\tout.add(new Item(0.08750, \"Byte\"));\n\t\tout.add(new Item(0.09375, \"Short\"));\n\t\tout.add(new Item(0.10000, \"Long\"));\n\t\tout.add(new Item(0.10625, \"Boolean\"));\n\t\tout.add(new Item(0.11250, \"Character\"));\n\t\tout.add(new Item(0.11875, \"for\"));\n\t\tout.add(new Item(0.12500, \"do\"));\n\t\tout.add(new Item(0.13125, \"while\"));\n\t\tout.add(new Item(0.13750, \"break\"));\n\t\tout.add(new Item(0.14375, \"continue\"));\n\t\tout.add(new Item(0.15000, \"default\"));\n\t\tout.add(new Item(0.15625, \"public\"));\n\t\tout.add(new Item(0.16250, \"private\"));\n\t\tout.add(new Item(0.16875, \"protected\"));\n\t\tout.add(new Item(0.17500, \"static\"));\n\t\tout.add(new Item(0.18125, \"final\"));\n\t\tout.add(new Item(0.18750, \"abstract\"));\n\t\tout.add(new Item(0.19375, \"strictfp\"));\n\t\tout.add(new Item(0.20000, \"const\"));\n\t\tout.add(new Item(0.20625, \"native\"));\n\t\tout.add(new Item(0.21250, \"volatile\"));\n\t\tout.add(new Item(0.21875, \"transient\"));\n\t\tout.add(new Item(0.22500, \"assert\"));\n\t\tout.add(new Item(0.23125, \"synchronized\"));\n\t\tout.add(new Item(0.23750, \"class\"));\n\t\tout.add(new Item(0.24375, \"new\"));\n\t\tout.add(new Item(0.25000, \"enum\"));\n\t\tout.add(new Item(0.25625, \"interface\"));\n\t\tout.add(new Item(0.26250, \"package\"));\n\t\tout.add(new Item(0.26875, \"import\"));\n\t\tout.add(new Item(0.27500, \"this\"));\n\t\tout.add(new Item(0.28125, \"instanceof\"));\n\t\tout.add(new Item(0.28750, \"if\"));\n\t\tout.add(new Item(0.29375, \"else\"));\n\t\tout.add(new Item(0.30000, \"switch\"));\n\t\tout.add(new Item(0.30625, \"case\"));\n\t\tout.add(new Item(0.31250, \"default\"));\n\t\tout.add(new Item(0.31875, \"return\"));\n\t\tout.add(new Item(0.32500, \"goto\"));\n\t\tout.add(new Item(0.33125, \"try\"));\n\t\tout.add(new Item(0.33750, \"catch\"));\n\t\tout.add(new Item(0.34375, \"finally\"));\n\t\tout.add(new Item(0.35000, \"throw\"));\n\t\tout.add(new Item(0.35625, \"throws\"));\n\t\tout.add(new Item(0.36250, \"super\"));\n\t\tout.add(new Item(0.36875, \"implements\"));\n\t\tout.add(new Item(0.37500, \"extends\"));\n\t\treturn out;\n\t}\n\n\tprivate static Item[] arithmetic() {\n\t\tItem[] out = new Item[] { new Item(1.00, \"+\"), new Item(1.05, \"-\"),\n\t\t\t\tnew Item(1.10, \"*\"), new Item(1.15, \"/\"), new Item(1.20, \"%\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] logical() {\n\t\tItem[] out = new Item[] { new Item(2.20, \"&\"), new Item(2.25, \"|\"),\n\t\t\t\tnew Item(2.30, \"^\"), new Item(2.35, \"!\"), new Item(2.40, \"~\"),\n\t\t\t\tnew Item(2.45, \"&&\"), new Item(2.50, \"||\"),\n\t\t\t\tnew Item(2.55, \"true\"), new Item(2.60, \"false\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] concatenation() {\n\t\tItem[] out = new Item[] { new Item(3.60, \"+\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] incDec() {\n\t\tItem[] out = new Item[] { new Item(4.60, \"++\"), new Item(4.65, \"--\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] shift() {\n\t\tItem[] out = new Item[] { new Item(5.65, \"<<\"), new Item(5.70, \">>\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] relational() {\n\t\tItem[] out = new Item[] { new Item(6.70, \"==\"), new Item(6.75, \"!=\"),\n\t\t\t\tnew Item(6.80, \"<\"), new Item(6.85, \">\"), new Item(6.90, \"<=\"),\n\t\t\t\tnew Item(6.95, \">=\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] assignment() {\n\t\tItem[] out = new Item[] { new Item(7.95, \"=\"), new Item(8.00, \"+=\"),\n\t\t\t\tnew Item(8.05, \"-=\"), new Item(8.10, \"*=\"),\n\t\t\t\tnew Item(8.15, \"/=\"), new Item(8.20, \"%=\"),\n\t\t\t\tnew Item(8.25, \"&=\"), new Item(8.30, \"^=\"),\n\t\t\t\tnew Item(8.35, \"<<=\"), new Item(8.40, \">>=\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] memberAccess() {\n\t\tItem[] out = new Item[] { new Item(8.45, \".\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] indexing() {\n\t\tItem[] out = new Item[] { new Item(8.50, \"[\"), new Item(9.50, \"]\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] cast() {\n\t\tItem[] out = new Item[] { new Item(10.50, \"(\"), new Item(10.55, \")\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] conditional() {\n\t\tItem[] out = new Item[] { new Item(11.55, \"?:\") };\n\t\treturn out;\n\t}\n\n\tprivate static Item[] objectCreation() {\n\t\tItem[] out = new Item[] { new Item(11.60, \"new\") };\n\t\treturn out;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.15625,0.175,0,0,0,0,0.15625,0.175,0,0,0,0,0.15625,0.175,0.05625,0,0.15625,0.175,0.05625,0,0.15625,0.175,0.0625,0,0.0625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1625,0.175,0,0,0,0,0,0,0,0,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.1625,0.175,0,0,0,0,0,0,0,0,0,0,0.31875,0]},{"nombre":"CodeImage.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.converter;\n\nimport java.util.ArrayList;\n\npublic class CodeImage {\n\n\tprivate ArrayList<Double> codeImg;\n\tprivate String codeLine;\n\n\tpublic CodeImage() {\n\t\tsuper();\n\t}\n\n\tpublic CodeImage(ArrayList<Double> codeImg, String codeLine) {\n\t\tsuper();\n\t\tthis.codeImg = codeImg;\n\t\tthis.codeLine = codeLine;\n\t}\n\n\tpublic ArrayList<Double> getCode_img() {\n\t\treturn codeImg;\n\t}\n\n\tpublic void setCodeImg(ArrayList<Double> codeImg) {\n\t\tthis.codeImg = codeImg;\n\t}\n\n\tpublic String getCodeLine() {\n\t\treturn codeLine;\n\t}\n\n\tpublic void setCodeLine(String codeLine) {\n\t\tthis.codeLine = codeLine;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0.075,0,0.1625,0.0625,0,0.15625,0,0.15625,0,0,0.075,0,0.0625,0,0.275,0,0,0.275,0,0,0.15625,0,0.075,0,0.31875,0,0.15625,0.00625,0,0,0.075,0,0.275,0,0,0.15625,0.0625,0,0.31875,0,0.15625,0.00625,0,0.0625,0,0.275,0,0]}],"paquetes":[]},{"nombre":"fdtw","codigos":[{"nombre":"FDTW.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.fdtw;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class FDTW {\n\t// FDTW\n\tpublic Double[] Q; // Secuencia\n\tpublic Double[] C; // Secuencia\n\tpublic Double[][] M; // Matriz de distancias\n\t// FDTW & Pattern Recognition\n\tpublic Node[] Path; // Array of index in M, for subsequence detection\n\tpublic int patterns_founded;\n\tpublic int[] Qcode_line;\n\tpublic int[] Ccode_line;\n\t// Otras variables\n\tpublic String FileQ, FileC; // Nombres de los archivos para guardar las\n\t\t\t\t\t\t\t\t// secuencias\n\n\tpublic FDTW() { // Default Constructor\n\t}\n\n\t// Se asigna la secuencia _Q, _C a Q y C\n\tpublic void SetSequences(Double[] _Q, Double[] _C) {\n\t\tQ = (Double[]) _Q.clone();\n\t\tC = (Double[]) _C.clone();\n\t}\n\n\t// Returns de FDTW distance between Q,C Sequences\n\tpublic double GetDistance() {\n\t\ttry {\n\t\t\tM = new Double[Q.length][C.length];\n\t\t\t// First element\n\t\t\tM[0][0] = euclidean(Q[0], C[0]);\n\t\t\t// First Row\n\t\t\tfor (int j = 1; j < C.length; j++)\n\t\t\t\tM[0][j] = M[0][j - 1] + euclidean(Q[0], C[j]);\n\t\t\t// First Column\n\t\t\tfor (int i = 1; i < Q.length; i++)\n\t\t\t\tM[i][0] = M[i - 1][0] + euclidean(Q[i], C[0]);\n\t\t\t// Rest of table\n\t\t\tfor (int i = 1; i < Q.length; i++)\n\t\t\t\tfor (int j = 1; j < C.length; j++) {\n\t\t\t\t\tdouble distance = euclidean(Q[i], C[j]);\n\t\t\t\t\tM[i][j] = M[i - 1][j - 1] + distance;\n\t\t\t\t\tif ((M[i - 1][j] + distance) < M[i][j])\n\t\t\t\t\t\tM[i][j] = M[i - 1][j] + distance;\n\t\t\t\t\tif ((M[i][j - 1] + distance) < M[i][j])\n\t\t\t\t\t\tM[i][j] = M[i][j - 1] + distance;\n\t\t\t\t}\n\t\t\t// Gets the Warp path for subsequence detection\n\t\t\tthis.BackTracking();\n\t\t\t// return de FDTW distance\n\n\t\t\treturn M[Q.length - 1][C.length - 1];\n\t\t} catch (Exception ex) {\n\t\t\tSystem.err.println(ex.toString());\n\t\t\t// if an error occurs return Infinity\n\t\t\treturn Double.MAX_VALUE;\n\t\t}\n\t}\n\n\t// Returns the Euclidean distance between two values\n\tprivate double euclidean(Double q, Double c) {\n\t\t// return Math.abs(q-c);\n\t\treturn (Math.sqrt(Math.pow(q - c, 2)));\n\t}\n\n\t// Performs BackTracking for further subsequence detection\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tprivate void BackTracking() {\n\t\tdouble distance = 0.00;\n\t\tint i, j; // Distance Matrix index\n\t\tNode p = new Node(); // Contains one path_item\n\t\tArrayList path = new ArrayList(); // Temporary Array\n\t\tp.q = i = Q.length - 1; // Path always include the last\n\t\tp.c = j = C.length - 1; // Matrix cell [Q,C]\n\t\tpath.add(p); // Add node to path\n\t\t// Move Along Distance Matrix until M[0,1] or M[1,0]\n\t\twhile (i > 1 || j > 1) {\n\t\t\tp = new Node();\n\t\t\t// Search the minimun distance from M[i,j] to\n\t\t\t// 45,0, and 90 degrees neighbors\n\t\t\t// 45 Degrees\n\t\t\tif (i >= 1 && j >= 1) {\n\t\t\t\tdistance = M[i - 1][j - 1];\n\t\t\t\tp.q = i - 1;\n\t\t\t\tp.c = j - 1;\n\t\t\t} else\n\t\t\t\tdistance = Double.MAX_VALUE;\n\n\t\t\t// 0 Grados\n\t\t\tif (i >= 0 && j > 0)\n\t\t\t\tif (M[i][j - 1] < distance) {\n\t\t\t\t\tp.q = i;\n\t\t\t\t\tp.c = j - 1;\n\t\t\t\t\tdistance = M[i][j - 1];\n\t\t\t\t}\n\n\t\t\t// 90 Grados\n\t\t\tif (i > 0 && j >= 0)\n\t\t\t\tif (M[i - 1][j] < distance) {\n\t\t\t\t\tp.q = i - 1;\n\t\t\t\t\tp.c = j;\n\t\t\t\t}\n\t\t\ti = p.q; // Move i,j index to closest neighbord with\n\t\t\tj = p.c; // minimum distance\n\t\t\tpath.add(p); // Add this node into path\n\t\t}\n\n\t\t// Path always include the first Matrix cell M[0,0]\n\t\tp = new Node();\n\t\tp.q = p.c = 0;\n\t\tpath.add(p);\n\t\t// Sort the elements for display\n\t\t// path.Reverse();\n\t\tCollections.reverse(path);\n\t\t// Path = (Node[])path.ToArray(typeof(node));\n\t\t// Path =(Node[]) path.toArray();\n\n\t\tPath = new Node[path.size()];\n\t\tfor (int kk = 0; kk < path.size(); kk++) {\n\t\t\tPath[kk] = (Node) path.get(kk);\n\t\t}\n\n\t\tint nsub = 0;\n\t\tboolean found = false;\n\t\t// Subsequence Detection\n\t\tfor (int z = 0; z < Path.length - 1; z++)\n\t\t\tif (Math.abs(Path[z].q - Path[z + 1].q) == 1\n\t\t\t\t\t&& Math.abs(Path[z].c - Path[z + 1].c) == 1) { // Do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// something\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// with\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// subsequence\n\t\t\t\tPath[z].IsSub = true;\n\t\t\t\tPath[z].nsub = nsub;\n\t\t\t\tPath[z + 1].IsSub = true;\n\t\t\t\tPath[z + 1].nsub = nsub;\n\t\t\t\tfound = true;\n\t\t\t} else if (found) {\n\t\t\t\tnsub++;\n\t\t\t\tfound = false;\n\t\t\t}\n\t\tpatterns_founded = nsub + 1;\n\t}\n\n\t// Write the subsequences founded into a folder.\n\tpublic void WriteSubsequences(String folder_dir,\n\t\t\tboolean zeroAverage_oneSplit) {\n\t\ttry {\n\t\t\tString dir;\n\t\t\tif (zeroAverage_oneSplit)\n\t\t\t\t// dir = folder_dir + \"subs_\"+ ExtractFileName(FileQ) + \"_\"+\n\t\t\t\t// ExtractFileName(FileC) + \"\\\\\";\n\t\t\t\tdir = folder_dir + \"subs_\" + (FileQ) + \"_\" + (FileC) + \"\\\\\";\n\t\t\telse\n\t\t\t\tdir = folder_dir + \"AVsubs_\" + (FileQ) + \"_\" + (FileC) + \"\\\\\";\n\t\t\t// dir = folder_dir + \"AVsubs_\"+ ExtractFileName(FileQ) + \"_\"+\n\t\t\t// ExtractFileName(FileC) + \"\\\\\";\n\n\t\t\t/*\n\t\t\t * if(!Directory.Exists(dir)) Directory.CreateDirectory(dir);\n\t\t\t */\n\n\t\t\t// crear directorio:\n\t\t\tFile directorio = new File(dir);\n\t\t\tif (!directorio.exists()) {\n\t\t\t\ttry {\n\t\t\t\t\tdirectorio.mkdirs();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Split\n\t\t\tif (zeroAverage_oneSplit)\n\t\t\t\tfor (int z = 0; z < Path.length; z++) {\n\t\t\t\t\tNode n;\n\t\t\t\t\tif (Path[z].IsSub) {\n\t\t\t\t\t\tint sub = Path[z].nsub;\n\t\t\t\t\t\t// using(StreamWriter sq = new StreamWriter(dir +\n\t\t\t\t\t\t// (sub+1) + \"_q.txt\")){\n\t\t\t\t\t\tFile sq = new File(dir + (sub + 1) + \"_q.txt\");\n\t\t\t\t\t\tFileWriter f1 = new FileWriter(sq, true);\n\t\t\t\t\t\t// using(StreamWriter sc = new StreamWriter(dir +\n\t\t\t\t\t\t// (sub+1) + \"_c.txt\")){\n\t\t\t\t\t\tFile sc = new File(dir + (sub + 1) + \"_c.txt\");\n\t\t\t\t\t\tFileWriter f2 = new FileWriter(sc, true);\n\t\t\t\t\t\twhile (z < Path.length && Path[z].nsub == sub) {\n\t\t\t\t\t\t\tn = Path[z];\n\t\t\t\t\t\t\t// sq.WriteLine(String.valueOf(Q[n.q]));\n\t\t\t\t\t\t\tf1.write(String.valueOf(Q[n.q]) + \"\\t\");\n\t\t\t\t\t\t\t// sc.WriteLine(String.valueOf(C[n.c]));\n\t\t\t\t\t\t\tf2.write(String.valueOf(C[n.c]) + \"\\t\");\n\t\t\t\t\t\t\tz++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tf1.close();\n\t\t\t\t\t\tf2.close();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tz--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t// Average\n\t\t\t\t// Show Subsequences\n\t\t\t\tfor (int z = 0; z < Path.length; z++) {\n\t\t\t\t\tNode n;\n\t\t\t\t\tif (Path[z].IsSub) {\n\t\t\t\t\t\tint sub = Path[z].nsub;\n\t\t\t\t\t\t// using(StreamWriter sw = new StreamWriter(dir +\n\t\t\t\t\t\t// (sub+1) + \"_av.txt\")){\n\t\t\t\t\t\tFile sw = new File(dir + (sub + 1) + \"_av.txt\");\n\t\t\t\t\t\tFileWriter f3 = new FileWriter(sw, true);\n\t\t\t\t\t\twhile (z < Path.length && Path[z].nsub == sub) {\n\t\t\t\t\t\t\tn = Path[z];\n\t\t\t\t\t\t\t// sw.WriteLine(((Q[n.q] + C[n.c]) / 2));\n\t\t\t\t\t\t\tf3.write(String.valueOf((Q[n.q] + C[n.c]) / 2)\n\t\t\t\t\t\t\t\t\t+ \"\\t\");\n\t\t\t\t\t\t\tz++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tf3.close();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tz--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t}\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.15625,0.075,0,0.15625,0.075,0,0.15625,0.075,0,0.15625,0,0,0.15625,0.01875,0,0.15625,0.01875,0,0.15625,0.01875,0,0.15625,0.0625,0,0,0.15625,0,0.15625,0.00625,0,0.075,0,0.075,0,0,0.075,0,0,0,0.075,0,0,0.15625,0.05625,0,0,0.075,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0.05625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.275,0,0.31875,0,0,0,0,0,0,0,0.3375,0,0,0,0,0,0,0,0.31875,0.075,0,0.1625,0.05625,0,0.075,0,0.075,0,0.31875,0,0,0,0,0,0,0,0,0,0,0.1625,0.00625,0,0.05625,0,0,0,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13125,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.075,0,0.2875,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0,0,0,0,0.01875,0,0,0.04375,0,0.11875,0.01875,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.29375,0.2875,0,0,0,0,0.15625,0.00625,0,0.0625,0,0.04375,0,0.0625,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0.3375,0,0,0.2875,0,0.11875,0.01875,0,0,0,0,0,0,0,0.2875,0,0,0,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13125,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0.2875,0,0,0,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13125,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0,0,0,0,0,0,0,0,0,0.3375,0,0]},{"nombre":"Node.java","contenido":"package pe.edu.eapisw.codecomparator.service.core.fdtw;\n\npublic class Node{ \n\t//Items contained in FDTW - Path \n\tpublic int q, c;  //index in Q and C Sequence \n\tpublic boolean IsSub; \n\tpublic int nsub; \n\t\n\tpublic Node() {\n\t\tIsSub = false;\n\t\tnsub = -1;\n\t}//Default Constructor \n}\n","q":[0.2625,0,0,0,0,0,0,0,0.15625,0.2375,0,0.15625,0.01875,0,0,0.15625,0.04375,0,0.15625,0.01875,0,0.15625,0,0,0]}],"paquetes":[]}]}]},{"nombre":"controller","codigos":[{"nombre":"ComparacionController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/comparacion\")\npublic class ComparacionController {\n\n    @RequestMapping(\"/layout\")\n    public String getLayout() {\n        return \"comparison/layout\";\n       \n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"HistorialController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/historial\")\npublic class HistorialController {\n\n    @RequestMapping(\"/layout\")\n    public String getLayout() {\n        return \"historial/layout\";\n       \n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"LoginController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Usuario;\nimport pe.edu.eapisw.codecomparator.service.UserService;\n\n@Controller\n@RequestMapping(\"/login\")\npublic class LoginController {\n\n\t@Autowired\n\tprivate UserService usuarioService;\n\n\t@RequestMapping(value = \"/user.json\")\n\tpublic @ResponseBody Usuario getUsuario() {\n\t\tSystem.out.println(\"LoginController.getUsuario()\");\n\t\treturn usuarioService.getUsuario();\n\t}\n\n\t@RequestMapping(\"/layout\")\n\tpublic String getLayout() {\n\t\treturn \"login/layout\";\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0,0,0,0,0.15625,0,0,0,0,0,0,0,0,0,0.31875,0,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"AccountController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/account\")\npublic class AccountController {\n\n    @RequestMapping(\"/layout\")\n    public String getLayout() {\n        return \"account/layout\";\n       \n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"IndexController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/\")\npublic class IndexController {\n\n\t@RequestMapping\n\tpublic String getIndexPage() {\n\t\treturn \"index\";\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0.15625,0.0625,0,0.31875,0]},{"nombre":"InicioController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/inicio\")\npublic class InicioController {\n\n    @RequestMapping(\"/layout\")\n    public String getLayout() {\n        return \"inicio/layout\";\n       \n    }\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]},{"nombre":"ComparisonController.java","contenido":"package pe.edu.eapisw.codecomparator.controller;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport pe.edu.eapisw.codecomparator.beans.json.Evaluacion;\nimport pe.edu.eapisw.codecomparator.beans.json.Posicion;\nimport pe.edu.eapisw.codecomparator.beans.json.Proyecto;\nimport pe.edu.eapisw.codecomparator.beans.model.ContainerChartResult;\nimport pe.edu.eapisw.codecomparator.beans.model.ContainerResult;\nimport pe.edu.eapisw.codecomparator.beans.model.ContenedorPosicion;\nimport pe.edu.eapisw.codecomparator.beans.model.Docente;\nimport pe.edu.eapisw.codecomparator.service.ComparisonService;\n\n@Controller\n@RequestMapping(\"/comparison\")\npublic class ComparisonController {\n\n\t@Autowired\n\tprivate ComparisonService comparisonService;\n\n\t@RequestMapping(\"/evaluaciones.json\")\n\tpublic @ResponseBody Collection<Evaluacion> getEvaluaciones() {\n\t\tDocente docente = new Docente();\n\t\tdocente.setDocenteId(\"/D010203\");\n\t\treturn comparisonService.getEvaluaciones(docente);\n\t}\n\n\t@RequestMapping(\"/elegidos\")\n\tpublic @ResponseBody void comparaProyectos(\n\t\t\t@RequestBody Collection<Posicion> elegidos) {\n\t\tIterator<?> it = elegidos.iterator();\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.getClass());\t\t\t\n\t\t\tit.next();\n\t\t}/*\n\t\tArrayList<Posicion> elegidosArray = (ArrayList<Posicion>)elegidos;\n\t\tfor(int i=0; i<elegidos.size(); i++){\n\t\t\tPosicion po = (Posicion)elegidosArray.get(i);\n\t\t\tProyecto p = po.getProyecto();\n\t\t\tSystem.out.println(p.getNombre());\n\t\t\tSystem.out.println(p.getCodigos());\n\t\t\t\n\t\t}*/\n\t\tSystem.out.println(\"ComparisonController.comparaProyectos()\");\n\t}\n\t\n\t@RequestMapping(\"/comparar\")\n\tpublic @ResponseBody ContainerResult compararProyectos(\n\t\t\t@RequestBody ContenedorPosicion contenedor) {\n\t\t\n\t\tContainerResult containerResult = new ContainerResult();\n\t\t\n\t\tSystem.out.println(contenedor.getPosiciones().size());\n\t\t\n\t\tSystem.out.println(\"ComparisonController.comparaProyectos()\");\n\t\ttry{\n\t\tif(contenedor.getPosiciones().size()==2){\n\n\t\t\tArrayList<Posicion> posiciones=  (ArrayList<Posicion>)contenedor.getPosiciones();\n\t\t\tPosicion posicion1 = posiciones.get(0);\n\t\t\tProyecto proyecto1 = posicion1.getProyecto();\n\t\t\tPosicion posicion2 = posiciones.get(1);\n\t\t\tProyecto proyecto2 = posicion2.getProyecto();\n\t\t\t\n\t\t\tArrayList<ContainerChartResult> containerCharResult =(ArrayList<ContainerChartResult>) comparisonService.comparisionProject(proyecto1,proyecto2);\n\t\t\tSystem.out.println(\"size: \"+containerCharResult.size());\n\t\t\tfor(int i=0; i<containerCharResult.size(); i++){\n\t\t\t\t//System.out.println(containerCharResult.get(i).getNameFirstProyect());\n\t\t\t\t//System.out.println(containerCharResult.get(i).getNameSecondProyect());\n\t\t\t\tSystem.out.println(containerCharResult.get(i).getFdtw());\n\t\t\t\t//System.out.println(containerCharResult.get(i).getCodeFirstProyect().getContenido());\n\t\t\t\t//System.out.println(containerCharResult.get(i).getCodeSecondProyect().getContenido());\n\t\t\t\t//System.out.println(containerCharResult.get(i).getCodeFirstProyect().getQ());\n\t\t\t\t//System.out.println(containerCharResult.get(i).getCodeSecondProyect().getQ());\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tcontainerResult.setCharResults(containerCharResult);\n\t\t\treturn containerResult;\n\t\t\t\n\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t@RequestMapping(\"/layout\")\n\tpublic String getLayout() {\n\t\treturn \"comparison/layout\";\n\t}\n}\n","q":[0.2625,0,0,0,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0,0,0,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0,0,0,0,0,0.15625,0,0.00625,0,0,0,0,0,0,0,0,0,0.13125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.11875,0.01875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31875,0,0.3375,0,0,0,0,0.31875,0,0,0,0,0.15625,0.0625,0,0.31875,0,0]}],"paquetes":[]},{"nombre":"persistence","codigos":[{"nombre":"DropboxClient.java","contenido":"package pe.edu.eapisw.codecomparator.persistence;\n\nimport java.io.IOException;\n\npublic interface DropboxClient {\n\n\t/**\n\t * EnvÔøΩa el contenido de <code>srcFileName</code> a Dropbox segÔøΩn la ruta\n\t * definida en <code>destFilename</code>.\n\t * \n\t * @param authTokenFile\n\t *            archivo que contiene el token de acceso al repositorio\n\t *            Dropbox.\n\t * @param srcFilename\n\t * @param destFilename\n\t *            ruta que puede crear carpetas, pero necesariamente describe a\n\t *            un archivo de destino.<br/>\n\t *            ie: <i>/codecomparator-server/another-directory/file.json</i>\n\t * @throws IOException\n\t */\n\tpublic void upload(String authTokenFile, String srcFilename,\n\t\t\tString destFilename);\n\n\t/**\n\t * Descarga el contenido de <code>srcFilename</code> a un archivo temporal.\n\t * \n\t * @param authTokenFile\n\t *            archivo que contiene el token de acceso al repositorio\n\t *            Dropbox.\n\t * @param srcFilename\n\t *            ruta del archivo almacenado en\n\t *            <code>codecomparator-server</code>.\n\t * @param destFilenameTemp\n\t *            localizaciÔøΩn temporal del contenido a descagar del\n\t *            repositorio.\n\t * @return contenido de <code>srcFilename</code>.\n\t */\n\tpublic String download(String authTokenFile, String srcFilename);\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.25625,0,0.15625,0.00625,0,0.0625,0,0.0625,0,0.0625,0,0.15625,0.0625,0,0.0625,0,0.0625,0]},{"nombre":"CursoMapper.java","contenido":"package pe.edu.eapisw.codecomparator.persistence;\n\nimport java.util.Collection;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Curso;\nimport pe.edu.eapisw.codecomparator.beans.model.Docente;\n\npublic interface CursoMapper {\n\n\tpublic Collection<Curso> getAllCursosByDocente(Docente docente);\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.25625,0,0.15625,0,0,0,0,0]},{"nombre":"UserMapper.java","contenido":"package pe.edu.eapisw.codecomparator.persistence;\n\nimport org.apache.ibatis.annotations.Insert;\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Results;\nimport org.apache.ibatis.annotations.Result;\nimport org.apache.ibatis.annotations.Select;\n\nimport pe.edu.eapisw.codecomparator.beans.model.Usuario;\n\npublic interface UserMapper {\n\n\t@Select(\"SELECT * FROM usuario WHERE usuario= #{username} and t_password = #{password}\")\n    @Results(value =  {\n            @Result(javaType = Usuario.class),\n            @Result(column = \"t_usuario\",property = \"usuario\"),\n            @Result(column = \"t_password\",property = \"password\")\n    })\n\tpublic Usuario loginDocente(Usuario usuario);\n\t\n\t@Insert(\"INSERT INTO usuario (t_usuario, t_password) VALUES (#{usuario},#{password})\")\n    public int crearCuentaDocente(Usuario usuario);\n\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.25625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2375,0,0,0,0,0,0,0,0,0,0,0.15625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15625,0.01875,0,0,0]}],"paquetes":[{"nombre":"impl","codigos":[{"nombre":"DropboxClientImpl.java","contenido":"package pe.edu.eapisw.codecomparator.persistence.impl;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Locale;\n\nimport pe.edu.eapisw.codecomparator.persistence.DropboxClient;\n\nimport com.dropbox.core.DbxClient;\nimport com.dropbox.core.DbxException;\nimport com.dropbox.core.DbxHost;\nimport com.dropbox.core.DbxRequestConfig;\nimport com.dropbox.core.DbxWriteMode;\nimport com.dropbox.core.json.JsonReader.FileLoadException;\n\npublic class DropboxClientImpl implements DropboxClient {\n\n\t// private DbxClient dbxClient;\n\n\t@Override\n\tpublic void upload(String authTokenFile, String srcFilename,\n\t\t\tString destFilename) {\n\n\t\tFile uploadFile = new File(srcFilename);\n\t\tFileInputStream uploadFIS;\n\t\ttry {\n\t\t\tuploadFIS = new FileInputStream(uploadFile);\n\t\t} catch (FileNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t\tSystem.err.println(\"Error in upload(): problem opening \"\n\t\t\t\t\t+ srcFilename);\n\t\t\treturn;\n\t\t}\n\n\t\tString targetPath = destFilename;\n\t\ttry {\n\t\t\t// dbxClient = createDbxClient(authTokenFile);\n\t\t\tcreateDbxClient(authTokenFile)/* dbxClient */.uploadFile(targetPath,\n\t\t\t\t\tDbxWriteMode.add(), uploadFile.length(), uploadFIS);\n\t\t}\n\n\t\tcatch (DbxException e) {\n\t\t\te.printStackTrace();\n\t\t\ttry {\n\t\t\t\tuploadFIS.close();\n\t\t\t} catch (IOException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\tSystem.err.println(\"Error in upload(): \" + e.getMessage());\n\t\t\tSystem.exit(1);\n\t\t\treturn;\n\t\t} catch (FileLoadException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate DbxClient createDbxClient(String authToken)\n\t\t\tthrows FileLoadException {\n\n\t\t// Create a DbxClient, which is what you use to make API calls.\n\t\tString userLocale = Locale.getDefault().toString();\n\t\tDbxRequestConfig requestConfig = new DbxRequestConfig(\"DbxUploader\",\n\t\t\t\tuserLocale);\n\t\tDbxHost host = new DbxHost(\"api.dropbox.com\",\n\t\t\t\t\"api-content.dropbox.com\", \"www.dropbox.com\");\n\t\treturn new DbxClient(requestConfig, authToken, host);\n\t}\n\n\t@SuppressWarnings(\"resource\")\n\t@Override\n\tpublic String download(String authToken, String srcFilename) {\n\t\tString temp = System.getProperty(\"java.io.tmpdir\")\n\t\t\t\t+ System.getProperty(\"file.separator\")\n\t\t\t\t+ String.valueOf(Math.random());\n\t\tString content = \"\";\n\t\tFileOutputStream fos;\n\t\ttry {\n\t\t\tFile fileTemp = new File(temp);\n\t\t\tfileTemp.createNewFile();\n\t\t\tfos = new FileOutputStream(temp);\n\t\t\tcreateDbxClient(authToken).getFile(srcFilename, null, fos);\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(temp));\n\t\t\tString line;\n\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\tcontent += line + \"\\n\";\n\t\t\t}\n\t\t\tfos.close();\n\t\t\tfileTemp.delete();\n\t\t} catch (DbxException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (FileLoadException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn content;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0,0.15625,0.2375,0,0.36875,0,0.15625,0.00625,0,0.0625,0,0.0625,0,0.0625,0,0,0,0,0,0,0,0,0,0,0.3375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0625,0,0]}],"paquetes":[]}]},{"nombre":"util","codigos":[{"nombre":"JSONUtil.java","contenido":"package pe.edu.eapisw.codecomparator.util;\n\nimport java.io.IOException;\n\nimport org.codehaus.jackson.JsonGenerationException;\nimport org.codehaus.jackson.JsonParseException;\nimport org.codehaus.jackson.map.JsonMappingException;\nimport org.codehaus.jackson.map.ObjectMapper;\n\npublic class JSONUtil {\n\n\tprivate ObjectMapper objectMapper;\n\n\tpublic String toJson(Object object) {\n\t\tString json = \"\";\n\t\tobjectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\tjson = objectMapper.writeValueAsString(object);\n\t\t} catch (JsonGenerationException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JsonMappingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn json;\n\t}\n\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tpublic Object toObject(String json, Class clazz) {\n\t\tobjectMapper = new ObjectMapper();\n\t\ttry {\n\t\t\treturn objectMapper.readValue(json, clazz);\n\t\t} catch (JsonParseException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JsonMappingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n}\n","q":[0.2625,0,0,0,0,0,0.15625,0.2375,0,0.1625,0,0,0.15625,0.0625,0,0,0,0.0625,0,0,0,0,0,0,0,0,0.3375,0,0,0,0,0.3375,0,0,0,0,0.3375,0,0,0,0,0.31875,0,0,0,0,0.15625,0,0,0.0625,0,0,0,0,0,0.31875,0,0,0,0,0.3375,0,0,0,0,0.3375,0,0,0,0,0.3375,0,0,0,0,0.31875,0]}],"paquetes":[]}]}]}]}]}]}},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null},{"alumno":null,"proyecto":null}]}
